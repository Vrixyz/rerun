searchState.loadedDescShard("rerun", 16, "Read the dictionary from the buffer and provided metadata, …\nRead the footer length from the last 10 bytes of an Arrow …\nCreates a record batch from binary data using the …\nKeeps track of dictionaries that have been written, to …\nStores the encoded data, which is an crate::Message, and …\nArrow File Writer\nHandles low level details of encoding <code>Array</code> and <code>Schema</code> …\nIPC write options used to control the behaviour of the …\nArrow Stream Writer\nArrow buffers to be written, should be an empty vec for …\nAn encoded crate::Message\nWrite a message’s IPC data and buffers, returning …\nA JSON writer which serializes <code>RecordBatch</code>es to JSON …\nTrait declaring any type that is serializable to JSON. …\nA JSON writer which serializes <code>RecordBatch</code>es to newline …\nEncode/decode structs as lists (e.g., [1, “c”])\nEncode/decode structs as objects (e.g., {“a”: 1, “b…\nReads JSON data with a known schema directly into arrow …\nA builder for <code>Reader</code> and <code>Decoder</code>\nSpecifies what is considered valid JSON when reading or …\nA JSON writer which serializes <code>RecordBatch</code>es to a stream of\nJSON writer builder.\nConverts self into json value if its possible\nJSON reader\nJSON Writer\nA low-level interface for reading JSON data from a byte …\nReads JSON data with a known schema directly into arrow …\nA builder for <code>Reader</code> and <code>Decoder</code>\nJSON file reader that produces a serde_json::Value …\nInfer the fields of a JSON file by reading the first n …\nInfer the fields of a JSON file by reading all items from …\nInfer the fields of a JSON file by reading the first n …\nA JSON writer which serializes <code>RecordBatch</code>es to JSON …\nProduces JSON output as a single JSON array.\nThis trait defines how to format a sequence of JSON …\nProduces JSON output with one record per line.\nA JSON writer which serializes <code>RecordBatch</code>es to newline …\nA JSON writer which serializes <code>RecordBatch</code>es to a stream of\nJSON writer builder.\nwrite any bytes needed for the end of each row\nwrite any bytes needed for the end of each row\nwrite any bytes needed for the start of each row\nwrite any bytes needed for the start of each row\nwrite any bytes needed for the start of each row\nwrite any bytes needed for the start of each row\nwrite any bytes needed at the start of the file to the …\nwrite any bytes needed at the start of the file to the …\nA Rust type representing an exception defined in Python …\nTrait for converting Python objects to arrow-rs types.\nConvert an arrow-rs type into a PyArrow object.\nRepresents an exception raised by PyArrow.\nA newtype wrapper for types implementing <code>FromPyArrow</code> or …\nCreate a new PyArrow object from a arrow-rs type.\nConvert a Python object to an arrow-rs type.\nConvert the implemented type into a Python object while …\nConvert the implemented type into a Python object without …\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nWrite footer or termination data, then mark the writer as …\nMatch field names of structs and lists. If set to <code>true</code>, …\nOptional row count, useful for specifying a row count for …\nReturns the schema of this <code>RecordBatchReader</code>.\nWrite a single batch to the writer.\nOwned version of a <code>Row</code> that can be moved/cloned freely.\nA comparable representation of a row.\nConverts <code>ArrayRef</code> columns into a row-oriented format.\nA <code>RowParser</code> can be created from a <code>RowConverter</code> and used to …\nA row-oriented representation of arrow data, that is …\nAn iterator over <code>Rows</code>\nConfigure the data type and sort order for a given column\nEncode dictionary values not preserving the dictionary …\nTensor of type BooleanType\nTensor of type Int8Type\nTensor of type Int16Type\nTensor of type Decimal128Type\nTensor of type Decimal256Type\nTensor of type DurationMicrosecondType\nTensor of type DurationMillisecondType\nTensor of type DurationNanosecondType\nTensor of type DurationSecondType\nTensor of type Float16Type\nTensor of type Float32Type\nTensor of type Float64Type\nTensor of type Int16Type\nTensor of type Int32Type\nTensor of type Int64Type\nTensor of type Int8Type\nTensor of type IntervalDayTimeType\nTensor of type IntervalMonthDayNanoType\nTensor of type IntervalYearMonthType\nTensor of primitive types\nTensor of type Time32MillisecondType\nTensor of type Time32SecondType\nTensor of type Time64MicrosecondType\nTensor of type Time64NanosecondType\nTensor of type TimestampMicrosecondType\nTensor of type TimestampMillisecondType\nTensor of type TimestampNanosecondType\nTensor of type TimestampSecondType\nTensor of type UInt16Type\nTensor of type UInt32Type\nTensor of type UInt64Type\nTensor of type UInt8Type\nTypes for iterating over bitmasks in 64-bit chunks\nTypes for iterating over packed bitmasks\nUtils for working with packed bit masks\nUtils for working with bits\nFunctions for printing array values as human-readable …\nUtilities for pretty printing <code>RecordBatch</code>es and <code>Array</code>s.\nString Writer This string writer encapsulates …\nIterator over chunks of 64 bits represented as an u64\nIterates over an arbitrarily aligned byte buffer\nIterates over an arbitrarily aligned byte buffer\nIterator over an <code>UnalignedBitChunk</code>\nAn iterator of <code>usize</code> whose index in a provided bitmask is …\nIterator over the bits within a packed bitmask\nIterator of contiguous ranges of set bits within a …\nCalls the provided closure for each index in the provided …\nUtil function to set bits in a slice of bytes.\nReturns the ceil of <code>value</code>/<code>divisor</code>\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nReturns the nearest number that is <code>&gt;=</code> than <code>num</code> and is a …\nReturns the nearest multiple of <code>factor</code> that is <code>&gt;=</code> than <code>num</code>…\nSets bit at position <code>i</code> for <code>data</code> to 1\nSets bit at position <code>i</code> for <code>data</code>\nSets bit at position <code>i</code> for <code>data</code> to 0\nSets bit at position <code>i</code> for <code>data</code> to 0\nA string formatter for an <code>Array</code>\nFormat for displaying durations\nOptions for formatting arrays\nISO 8601 - <code>P198DT72932.972880S</code>\nA human readable representation - …\nImplements <code>Display</code> for a specific array value\nGet the value at the given row in an array as a String.\nConverts numeric type to a <code>String</code>\nCreate a visual representation of record batches\nCreate a visual representation of record batches\nCreate a visual representation of columns\nPrints a visual representation of record batches to stdout\nPrints a visual representation of a list of column to …\nA writer that allows writing to a <code>String</code> like an …\nTUID: Time-based Unique Identifier.\nAn archetype is a high-level construct that represents a …\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nA unique ID for a <code>Chunk</code>.\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nA <code>ComponentDescriptor</code> fully describes the semantics of a …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nA unique ID for a row’s worth of data within a chunk.\nThe serialized contents of a <code>ComponentBatch</code> with …\nA column’s worth of component data.\nViews are the panels shown in the viewer’s viewport and …\nThe unique name of a view\nReturns all component descriptors that must, should and …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nFundamental <code>Archetype</code>s that are implemented in …\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nEasily iterate over arrow values that may contain nulls.\nExposes the object’s contents as a set of …\nSemantic name associated with this data.\nFundamental <code>Component</code>s that are implemented in …\nFundamental datatypes that are implemented in <code>re_types_core</code>…\nImplements <code>crate::Component</code> for any given type that is a …\nReturns the complete <code>ComponentDescriptor</code> for this <code>Component</code>…\nReturns the complete <code>ComponentDescriptor</code> for this …\nReadable name for displaying in UI.\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nReturns all component descriptors that <em>may</em> be provided by …\nReturns all component descriptors that <em>should</em> be provided …\nRun-time reflection for reading meta-data about components …\nReturns all component descriptors that <em>must</em> be provided by …\nSerializes the contents of this <code>ComponentBatch</code>.\nUseful macro for statically asserting that a <code>struct</code> …\nSerializes the batch into an Arrow array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nSerializes the contents of this <code>ComponentBatch</code>.\nVerifies that the given Arrow array can be deserialized …\n<strong>Archetype</strong>: Empties all the components of an entity.\nMove an arrow array into an <code>ArrayRef</code>.\nThere are null values\nThere are no null values\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\n<strong>Component</strong>: Configures how a clear operation should behave …\nBoundary is an absolute value.\n<strong>Datatype</strong>: A single boolean.\nBoundary is a value relative to the time cursor.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nHigh time boundary for sequence timeline.\nTime range to use for this timeline.\nLow time boundary for sequence timeline.\nName of the timeline this applies to.\nIterator of a chain of source errors.\nProvides the <code>context</code> method for <code>Result</code>.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nEquivalent to <code>Ok::&lt;_, anyhow::Error&gt;(value)</code>.\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nConstruct an ad-hoc error from a string or existing non-…\nReturn early with an error.\nWrap the error value with additional context.\nReturn early with an error if a condition is not satisfied.\nConstruct an ad-hoc error from a string or existing non-…\nWrap the error value with additional context that is …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nIf deprecated, this explains since when, and what to use …\nIf deprecated, this explains since when, and what to use …\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nComputes a placeholder for a given arrow datatype.\nIs this a required component?\nThe name of the field (i.e. same as …\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nChecks that the given Arrow array can be deserialized into …\nThe views that this archetype can be added to.\n64-bit hash.\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nError returned by <code>EntityPathFilter::resolve_strict</code> and …\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA single entity path rule.\nA set of substitutions for entity paths.\nAn <code>EntityPathFilter</code> with all variables Resolved.\nA path rule with all variables resolved to entity paths.\ne.g. <code>Points3D:Color#color</code>\n<code>camera / &quot;left&quot; / points / #42</code>\nImplement natural ordering for strings, so that “file5”…\nThe resolved path, with all variables Resolved.\nThe original rule, with unresolved variables.\nHelper for ordering strings\nNatural ordering for strings, so that “file5” &lt; “…\nA <code>crate::sink::LogSink</code> tied to a hosted Rerun gRPC server.\nLog an entity using an <code>ArrowMsg</code>.\nSend after all messages in a blueprint to signal that the …\nDense arrow-based storage of N rows of multi-component …\nImplements an asynchronous batcher that coalesces …\nDefines the different thresholds of the associated …\nErrors that can occur when creating/manipulating a …\nErrors that can occur when creating/manipulating a <code>Chunk</code>s, …\nA unique ID for a <code>Chunk</code>.\nContains the error value\nContains the error value\nThe most general log message sent from the SDK to the …\nContains the success value\nContains the success value\nError when parsing configuration from environment.\nA single row’s worth of data (i.e. a single log call).\nA unique ID for a row’s worth of data within a chunk.\nA new recording has begun.\nError spawning one of the background threads.\nSplit a chunk if it contains &gt;= rows than this threshold …\nThe component data.\nFlush if the accumulated payload has a size in bytes equal …\nFlush if the accumulated payload has a number of rows …\nDuration of the periodic tick.\nCallbacks you can install on the <code>ChunkBatcher</code>.\nSize of the internal channel of <code>Chunk</code>s.\nSize of the internal channel of commands.\nAuto-generated <code>TUID</code>, uniquely identifying this event and …\nUser-specified <code>TimePoint</code> for this event.\n<strong>Component</strong>: A color multiplier, usually applied to a whole …\n<strong>Datatype</strong>: Angle in radians.\n<strong>Archetype</strong>: The annotation context provides additional …\n<strong>Datatype</strong>: Annotation info annotating a class id or …\n<strong>Archetype</strong>: 2D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: 3D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, …\n<strong>Archetype</strong>: A video binary.\nRotation defined with an axis and an angle.\nBlue, Green, Red\nBlue, Green, Red, Alpha\n<strong>Archetype</strong>: A bar chart.\n<strong>Archetype</strong>: 2D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D capsules; cylinders with hemispherical caps.\n<strong>Datatype</strong>: The innermost datatype of an image.\nThe transform describes how to transform into the child …\n<strong>Datatype</strong>: The description of a semantic Class.\n<strong>Archetype</strong>: Empties all the components of an entity.\n<strong>Component</strong>: An RGBA color with unmultiplied/separate alpha, …\n<strong>Datatype</strong>: Specified what color components are present in …\nMany lines are drawn to represent the surface of the shape …\n<strong>Archetype</strong>: A depth image, i.e. as captured by a depth …\n<strong>Archetype</strong>: 3D ellipsoids or spheres.\n<strong>Archetype</strong>: An image encoded as e.g. a JPEG or PNG.\n16-bit IEEE-754 floating point, also known as <code>half</code>.\n16bit IEEE-754 floating point, also known as <code>half</code>.\n32-bit IEEE-754 floating point, also known as <code>float</code> or …\n32bit IEEE-754 floating point, also known as <code>float</code> or …\n64-bit IEEE-754 floating point, also known as <code>double</code>.\n64bit IEEE-754 floating point, also known as <code>double</code>.\n<strong>Component</strong>: How a geometric shape is drawn and colored.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Archetype</strong>: Geospatial line strings with positions …\n<strong>Archetype</strong>: Geospatial points with positions expressed in …\n<strong>Archetype</strong>: A list of edges in a graph.\n<strong>Archetype</strong>: A list of nodes in a graph with optional …\n<strong>Component</strong>: Half-size (radius) of a 2D box.\n<strong>Component</strong>: Half-size (radius) of a 3D box.\n16-bit signed integer.\n16bit signed integer.\n32-bit signed integer.\n32bit signed integer.\n64-bit signed integer.\n64bit signed integer.\n8-bit signed integer.\n8bit signed integer.\n<strong>Archetype</strong>: A monochrome or color image.\n<strong>Component</strong>: The metadata describing the contents of a …\n<strong>Archetype</strong>: One or more transforms between the current …\n<strong>Datatype</strong>: A connection between two <code>datatypes::KeypointId</code>s.\nGrayscale luminance intencity/brightness/value, sometimes …\n<strong>Component</strong>: A line strip in 2D space.\n<strong>Component</strong>: A line strip in 3D space.\n<strong>Archetype</strong>: 2D line strips with positions and optional …\n<strong>Archetype</strong>: 3D line strips with positions and optional …\nLines are drawn around the parts of the shape which …\n<strong>Datatype</strong>: A 3x3 Matrix.\n<strong>Component</strong>: A standardized media type (RFC2046, formerly …\n<strong>Archetype</strong>: A 3D triangle mesh as specified by its per-mesh …\n<code>NV12</code> (aka <code>Y_UV12</code>) is a YUV 4:2:0 chroma downsampled form …\nThe transform describes how to transform into the parent …\n<strong>Archetype</strong>: Camera perspective projection (a.k.a. …\n<strong>Datatype</strong>: Specifieds a particular format of an …\n<strong>Archetype</strong>: A 2D point cloud with positions and optional …\n<strong>Archetype</strong>: A 3D point cloud with positions and optional …\n<strong>Component</strong>: A position in 2D space.\n<strong>Component</strong>: A position in 3D space.\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\nRotation defined by a quaternion.\nRed, Green, Blue\nRed, Green, Blue, Alpha\n<strong>Component</strong>: The radius of something, e.g. a point.\n<strong>Archetype</strong>: A list of properties associated with a …\n<strong>Datatype</strong>: An RGBA color with unmultiplied/separate alpha, …\nA 3D rotation.\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\n<strong>Archetype</strong>: One or more double-precision scalar values, …\n<strong>Component</strong>: A 3D scale factor.\n<strong>Archetype</strong>: An image made up of integer <code>components::ClassId</code>…\n<strong>Archetype</strong>: Define the style properties for one or more …\n<strong>Archetype</strong>: Define the style properties for one or more …\nThe surface of the shape is filled in with a solid color. …\n<strong>Archetype</strong>: An N-dimensional array of numbers.\n<strong>Datatype</strong>: The underlying storage for <code>archetypes::Tensor</code>.\n<strong>Datatype</strong>: An N-dimensional array of numbers.\n<strong>Component</strong>: A string of text, e.g. for labels and text …\n<strong>Archetype</strong>: A text element intended to be displayed in its …\n<strong>Archetype</strong>: A log entry in a text log, comprised of a text …\n<strong>Component</strong>: The severity level of a text log message.\n<strong>Archetype</strong>: A transform between two 3D spaces, i.e. a pose.\n<strong>Component</strong>: Specifies relation a spatial transform …\n<strong>Component</strong>: The three indices of a triangle in a triangle …\n16-bit unsigned integer.\n16bit unsigned integer.\n32-bit unsigned integer.\n32bit unsigned integer.\n64-bit unsigned integer.\n64bit unsigned integer.\n8-bit unsigned integer.\n8bit unsigned integer.\n<strong>Datatype</strong>: A vector in 2D space.\n<strong>Datatype</strong>: A vector in 3D space.\n<strong>Datatype</strong>: A vector in 4D space.\n<strong>Component</strong>: A vector in 2D space.\n<strong>Component</strong>: A vector in 3D space.\n<strong>Archetype</strong>: References a single video frame.\n<strong>Archetype</strong>: How we interpret the coordinate system of an …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\n<code>YUY2</code> (aka ‘YUYV’, ‘YUYV16’ or ‘NV21’), is a …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\nConfigures the zoom-dependent scalar aggregation.\nA color multiplier applied to the whole asset.\nA color multiplier applied to the whole mesh.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nHow much to rotate around the axis.\nAxis to rotate around.\nVisual length of the 3 axes.\nThe asset’s bytes.\nThe asset’s bytes.\nThe encoded content of some image file, e.g. a PNG or JPEG.\nThe raw depth image data.\nThe raw image data.\nThe raw image data.\nThe content/data.\nSets the view coordinates for the camera.\nOptional center positions of the boxes.\nOptional center positions of the boxes.\nOptional center positions of the ellipsoids.\nOptional class Ids for the points.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional class ID for the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the lines.\nOptional <code>components::ClassId</code>s for the lines.\nOptional class Ids for the vertices.\nOptional class Ids for the points.\nOptional class Ids for the points.\nThe color of the bar chart\nOptional color to use for the log line in the Rerun Viewer.\nThe color that will be applied to the annotated entity.\nColormap to use for rendering the depth image.\nOptional colors for the points.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the boxes.\nOptional colors for the capsules.\nOptional colors for the ellipsoids.\nOptional colors for the line strings.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the line strips.\nOptional colors for the line strips.\nOptional colors for the points.\nOptional colors for the points.\nColor for the corresponding series.\nColor for the corresponding series.\nList of class descriptions, mapping class indices to class …\nThe tensor data\nThe expected range of depth values.\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nA list of node tuples.\nOptionally choose whether the boxes are drawn with lines …\nOptionally choose whether the ellipsoids are drawn with …\nThe format of the image.\nThe format of the image.\nThe format of the image.\nSpecifies if the graph is directed or undirected.\nAll half-extents that make up the batch of boxes.\nAll half-extents that make up the batch of boxes.\nFor each ellipsoid, half of its size on its three axes.\n<code>datatypes::ClassId</code> or <code>datatypes::KeypointId</code> to which this …\nCamera projection, from image coordinates to view …\nThe distance from the camera origin to the image plane …\nThe <code>datatypes::AnnotationInfo</code> for the class.\nThe first point of the pair.\nThe second point of the pair.\nThe <code>datatypes::AnnotationInfo</code> for all of the keypoints.\nThe connections between keypoints.\nOptional keypoint IDs for the points, identifying them …\nOptional keypoint IDs for the points, identifying them …\nThe label that will be shown in the UI.\nOptional text labels for the arrows.\nOptional text labels for the arrows.\nOptional text labels for the boxes.\nOptional text labels for the boxes.\nOptional text labels for the capsules, which will be …\nOptional text labels for the ellipsoids.\nOptional text labels for the node.\nOptional text labels for the line strips.\nOptional text labels for the line strips.\nOptional text labels for the points.\nOptional text labels for the points.\nLengths of the capsules, defined as the distance between …\nThe verbosity level of the message.\nOptional radii for the lines used when the ellipsoid is …\nThe line strings, expressed in EPSG:4326 coordinates …\nSizes of the markers.\nWhat shape to use to represent the point\n3x3 transformation matrices.\n3x3 transformation matrix.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the text.\nAn optional floating point value that specifies how long a …\nA user-chosen name for the recording.\nDisplay name of the series.\nDisplay name of the series.\nThe names of the dimensions of the tensor (optional).\nA list of node IDs.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering the segmentation …\nAll the origin (base) positions for each arrow in the …\nAll the origin (base) positions for each arrow in the …\nScale the radii of the points in the point cloud generated …\nThe EPSG:4326 coordinates for the points …\nOptional center positions of the nodes.\nAll the 2D positions at which the point cloud shows points.\nAll the 3D positions at which the point cloud shows points.\nRotation via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nAngle in radians. One turn is equal to 2π (or τ) radians.\nOptional radii for the arrows.\nOptional radii for the arrows.\nOptional radii for the lines that make up the boxes.\nOptional radii for the lines that make up the boxes.\nRadii of the capsules.\nOptional radii for the line strings.\nOptional radii for the points, effectively turning them …\nOptional radii for nodes.\nOptional radii for the line strips.\nOptional radii for the line strips.\nOptional radii for the points, effectively turning them …\nOptional radii for the points, effectively turning them …\nSpecifies the relation this transform establishes between …\nPixel resolution (usually integers) of child image space. …\nRotation via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nThe scalar values to log.\nScaling factor.\nScaling factors.\nThe shape of the tensor, i.e. the length of each dimension.\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nWhen the recording started.\nAll the actual 2D line strips that make up the batch.\nAll the actual 3D line strips that make up the batch.\nContents of the text document.\nThe body of the message.\nReferences the closest video frame to this timestamp.\nTranslation vector.\nOptional translations of the capsules.\nTranslation vectors.\nOptional indices for the triangles that make up the mesh.\nThe expected range of values.\nThe values. Should always be a 1-dimensional tensor (i.e. …\nAll the vectors for each arrow in the batch.\nAll the vectors for each arrow in the batch.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nThe positions of each vertex.\nAn optional uv texture coordinate for each vertex.\nOptional reference to an entity with a …\nWhich lines are visible.\nWhich lines are visible.\nStroke width for the corresponding series.\nThe directions of the [x, y, z] axes.\nStream log messages to an in-memory binary stream.\nThe storage used by <code>BinaryStreamSink</code>.\nStore log messages in memory until you call …\nA sink which forwards all log messages to a callback …\nError creating the file.\nStream log messages to an <code>.rrd</code> file.\nErrors that can occur when creating a <code>FileSink</code>.\nStream log messages to an a remote Rerun server.\nError encoding a log message.\nWhere the SDK sends its log messages.\nStore log messages directly in memory.\nThe storage used by <code>MemorySink</code>.\nError spawning the file writer thread.\nDrain all buffered <code>LogMsg</code>es and return them.\nDrops all pending data currently sitting in the sink’s …\nBlocks until all pending data in the sink’s send buffers …\nSend this log message.\nSend all these log messages.\nSend a blueprint directly to the log-sink.\nA signed duration represented as nanoseconds since unix …\nDuration measured in nanoseconds.\nUsed e.g. for frames in a film.\nAn typed cell of an index, e.g. a point in time on some …\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>crate::Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nEncodes a timestamp in nanoseconds since unix epoch.\nNanoseconds since unix epoch (1970-01-01 00:00:00 UTC).\n<strong>Datatype</strong>: Angle in radians.\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\nHow much to rotate around the axis.\nAxis to rotate around.\nAngle in radians. One turn is equal to 2π (or τ) radians.\nInvalid host IP.\nHelper to spawn an instance of the <code>WebViewerServer</code> and …\nFailure to host the web viewer.\nFailure to host a web viewer and/or Rerun server.\nIp to which the http server is bound.\nThe url to which any spawned webviewer should connect.\nIf set, adjusts the browser url to force a specific …\nServe log-data over gRPC and serve a Rerun web viewer over …\nIf set to <code>true</code>, opens the default browser after hosting …\nServes the Rerun Web Viewer (HTML+JS+Wasm) over http.\nIf set, adjusts the browser url to set the video decoder …\nThe port to which the webviewer should bind.\nStream log messages to an in-memory binary stream.\nThe storage used by <code>BinaryStreamSink</code>.\nStore log messages in memory until you call …\nA sink which forwards all log messages to a callback …\nError creating the file.\nStream log messages to an <code>.rrd</code> file.\nErrors that can occur when creating a <code>FileSink</code>.\nStream log messages to an a remote Rerun server.\nError encoding a log message.\nWhere the SDK sends its log messages.\nStore log messages directly in memory.\nThe storage used by <code>MemorySink</code>.\nError spawning the file writer thread.\nAccess the raw <code>MemorySinkStorage</code>\nConvert the stored messages into an in-memory Rerun log …\nDrain the stored messages and return them as an in-memory …\nDrain all buffered <code>LogMsg</code>es and return them.\nDrops all pending data currently sitting in the sink’s …\nFlush the batcher and log encoder to guarantee that all …\nBlocks until all pending data in the sink’s send buffers …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a pair of a new <code>BinaryStreamSink</code> and the associated …\nCreate a new <code>MemorySink</code> with an associated <code>RecordingStream</code>.\nCreate a new <code>CallbackSink</code> with the given callback function.\nConnect to the in-memory storage node over HTTP.\nStart writing log messages to a file at the given path.\nAn empty buffer.\nHow many messages are currently written to this memory sink\nRead and consume the current contents of the buffer.\nSend this log message.\nSend all these log messages.\nSend a blueprint directly to the log-sink.\nStart writing log messages to standard output.\nGet the <code>StoreId</code> from the associated <code>RecordingStream</code> if it …\nConsumes and returns the inner array of <code>LogMsg</code>.\nA signed duration represented as nanoseconds since unix …\nDuration measured in nanoseconds.\nUsed e.g. for frames in a film.\nAn typed cell of an index, e.g. a point in time on some …\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>crate::Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nEncodes a timestamp in nanoseconds since unix epoch.\nNanoseconds since unix epoch (1970-01-01 00:00:00 UTC).\nReturns the appropriate arrow datatype to represent this …\nHuman-readable timestamp.\nFormats the time as specified by ISO standard <code>RFC3339</code>.\nFormat as seconds, approximately.\nUseful when showing dates/times on a timeline and you want …\nUseful when showing dates/times on a timeline and you want …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an array with the appropriate datatype.\nReturns an array with the appropriate datatype, using <code>None</code> …\nParses a human-readable time string into a <code>TimeInt</code>.\nParse a timestamp,\n<strong>Datatype</strong>: Angle in radians.\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\nHow much to rotate around the axis.\nAxis to rotate around.\nAngle in radians. One turn is equal to 2π (or τ) radians.\nInvalid host IP.\nHelper to spawn an instance of the <code>WebViewerServer</code> and …\nFailure to host the web viewer.\nFailure to host a web viewer and/or Rerun server.\nIp to which the http server is bound.\nThe url to which any spawned webviewer should connect.\nIf set, adjusts the browser url to force a specific …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper to spawn an instance of the <code>WebViewerServer</code>. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nServe log-data over gRPC and serve a Rerun web viewer over …\nIf set to <code>true</code>, opens the default browser after hosting …\nServes the Rerun Web Viewer (HTML+JS+Wasm) over http.\nIf set, adjusts the browser url to set the video decoder …\nThe port to which the webviewer should bind.")