searchState.loadedDescShard("re_viewer", 7, "A “calendar” interval in months array builder.\nThe Arrow type of the element being accessed.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets\nBuilder for <code>LargeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>RunArray</code> of <code>LargeBinaryArray</code>\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nBuilder for <code>LargeListArray</code>\nA <code>GenericListViewArray</code> of variable size lists, storing …\nBuilder for <code>LargeListViewArray</code>\nA <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets\nBuilder for <code>LargeStringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeStringArray</code>\nBuilder for <code>RunArray</code> of <code>LargeStringArray</code>\nList and LargeList data types\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nBuilder for <code>ListArray</code>\nA <code>GenericListViewArray</code> of variable size lists, storing …\nBuilder for <code>ListViewArray</code>\nThe maximum value and identity for the <code>min</code> aggregation. …\nThe minimum value and identity for the <code>max</code> aggregation. …\nAn array of key-value maps\nan iterator that returns Some(T) or None, that can be used …\nBuilder for <code>MapArray</code>\nThe <code>Field</code> names for a <code>MapArray</code>\nEfficiently create an ArrayData from one or more existing …\nCorresponding Rust native type for the primitive type.\nAn optional primitive value\nAn array of null values\nBuilder for creating <code>NullBuffer</code>\nBuilder for <code>NullArray</code>\nThe multiplicative identity\nBuilder of <code>OffsetBuffer</code>\nA type that can be used within a variable-size array to …\nPrefix for the offset size\nAn array of primitive values, of type <code>ArrowPrimitiveType</code>\nBuilder for <code>PrimitiveArray</code>\nBuilder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>\nan iterator that returns Some(T) or None, that can be used …\nBuilder for <code>RunArray</code> of <code>PrimitiveArray</code>\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nAn array of run-end encoded values\nA wrapper around a single value <code>Array</code> that implements <code>Datum</code>…\nA <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets\nA trait for Arrow String Arrays, currently three types are …\nBuilder for <code>StringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>StringArray</code>\nBuilder for <code>RunArray</code> of <code>StringArray</code>\nA <code>GenericByteViewArray</code> that stores utf8 data\nArray builder for <code>StringViewArray</code>\nStruct type\nAn array of structs\nBuilder for <code>StructArray</code>\nA <code>PrimitiveArray</code> of milliseconds since midnight stored as …\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in milliseconds array builder.\nA <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in seconds array builder.\nA <code>PrimitiveArray</code> of microseconds since midnight stored as …\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in microseconds array builder.\nA <code>PrimitiveArray</code> of nanoseconds since midnight stored as …\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in nanoseconds array builder.\nA <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …\nBuffer builder for timestamp type of microsecond unit.\nA timestamp microsecond array builder.\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nBuffer builder for timestamp type of millisecond unit.\nA timestamp millisecond array builder.\nA <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …\nBuffer builder for timestamp type of nanosecond unit.\nA timestamp nanosecond array builder.\nA <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>\nBuffer builder for timestamp type of second unit.\nA timestamp second array builder.\nA <code>DictionaryArray</code> typed on its child values array\nA <code>RunArray</code> typed typed on its child values array\nA <code>PrimitiveArray</code> of <code>u16</code>\nBuffer builder for usigned 16-bit integer type.\nAn usigned 16-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u16</code>\nA <code>PrimitiveArray</code> of <code>u32</code>\nBuffer builder for usigned 32-bit integer type.\nAn usigned 32-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u32</code>\nA <code>PrimitiveArray</code> of <code>u64</code>\nBuffer builder for usigned 64-bit integer type.\nAn usigned 64-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u64</code>\nA <code>PrimitiveArray</code> of <code>u8</code>\nBuffer builder for usigned 8-bit integer type.\nAn usigned 8-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u8</code>\nAn array of values of varying types\nBuilder for <code>UnionArray</code>\nVariable width, such as string data for utf8 data\nThe additive identity\nChecked addition operation\nWrapping addition operation\nThe concrete array definitions\nReturns the array as <code>Any</code> so that it can be downcasted to a …\nReturns the builder as a non-mutable <code>Any</code> reference.\nDowncasts this to a <code>AnyDictionaryArray</code> returning <code>None</code> if …\nReturns the builder as a mutable <code>Any</code> reference.\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>BooleanArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericByteViewArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericByteArray</code> returning <code>None</code> if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>DictionaryArray</code> returning <code>None</code> if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>FixedSizeListArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericListViewArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to <code>MapArray</code>…\nDowncast this to a <code>MapArray</code> returning <code>None</code> if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code>, to …\nDowncast this to a <code>PrimitiveArray</code> returning <code>None</code> if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>StructArray</code> returning <code>None</code> if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>UnionArray</code> returning <code>None</code> if not …\nThe buffer index.\nA vector of buffer layout specifications, one for each …\nDefines push-based APIs for constructing arrays\nCan contain a null bitmask\nDefines helper functions for downcasting <code>dyn Array</code> to …\nWrite footer or termination data, then mark the writer as …\nCompare operation\nCreates an array from a literal slice of values, suitable …\nReturns a reference to the <code>DataType</code> of this array.\nChecked division operation\nWrapping division operation\nDowncasts a <code>dyn Array</code> to a concrete type\nDowncast an <code>Array</code> to a <code>DictionaryArray</code> based on its …\nGiven one or more expressions evaluating to an integer …\nGiven one or more expressions evaluating to an integer …\nGiven one or more expressions evaluating to primitive …\nDowncast an <code>Array</code> to a <code>PrimitiveArray</code> based on its <code>DataType</code>\nDowncast an <code>Array</code> to a <code>RunArray</code> based on its <code>DataType</code>, …\nGiven one or more expressions evaluating to an integer …\nGiven one or more expressions evaluating to primitive …\nDowncast an <code>Array</code> to a temporal <code>PrimitiveArray</code> based on …\n<code>Field</code> name for map entries\nExports an array to raw pointers of the C Data Interface …\nContains declarations to bind to the C Data Interface.\nContains declarations to bind to the C Stream Interface.\nBuilds the array\nBuilds the array without resetting the underlying builder.\nReturns the value for this <code>Datum</code> and a boolean indicating …\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory pointed to by …\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the underlying data of this array\nReturns true if all data within this string array is ASCII\nReturns whether this array is empty.\nEquality operation\nReturns true if zero else false\nConstructs a new iterator\nConstructs a new iterator\nIdiomatic iterators for <code>Array</code>\n<code>Field</code> name for map key\nReturns the primitive keys of this dictionary as an <code>Array</code>\nReturn the expected <code>DataTypeLayout</code> Arrays of this data …\nReturns the length (i.e., number of elements) of this …\nReturns the number of array slots in the builder\nThe length of the string/bytes.\nConstructs an array using the input <code>data</code>. Returns a …\nReturns a builder with capacity for <code>capacity</code> elements of …\nReturns a comparison function that compares two values at …\nCreate a view based on the given data, block id and offset.\nMatch field names of structs and lists. If set to <code>true</code>, …\nChecked remainder operation\nWrapping remainder operation\nChecked multiplication operation\nWrapping multiplication operation\nCorresponding Rust native type if available\nChecked negation operation\nWrapping negation operation\nCreates a new empty array\nCreates a new array of <code>data_type</code> of length <code>length</code> filled …\nReturns the keys of this dictionary as usize\nReturns the null buffer of this array if any.\nReturns the offset into the underlying data used by this …\nThe offset into the buffer.\nChecked exponentiation operation\nWrapping exponentiation operation\nFirst 4 bytes of string/bytes data.\nCreates a record batch from literal slice of values, …\nOptional row count, useful for specifying a row count for …\nIdiomatic iterator for <code>RunArray</code>\nReturns the schema of this <code>RecordBatchReader</code>.\nReturns a zero-copy slice of this array with the indicated …\nChecked subtraction operation\nWrapping subtraction operation\nConversion methods for dates and times.\nTimezone for timestamp arrays\nReturns the underlying data of this array\nZero-sized types used to parameterize generic array …\nReturns the element at index <code>i</code>\n<code>Field</code> name for map value\nReturns the element at index <code>i</code>\nReturns the values of this dictionary\nThis field only applies to the view type …\nCreate a new <code>DictionaryArray</code> replacing <code>values</code> with the new …\nWrite a single batch to the writer.\nThe alignment required by Rust for an array of the …\nThe width of each element in bytes\nA <code>DictionaryArray</code> with the key type erased\nAn array in the arrow columnar format\nA generic trait for accessing the values of an <code>Array</code>\nA reference-counted reference to a generic <code>Array</code>\nTrait for primitive values.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i32</code> offsets\nA trait for Arrow String Arrays, currently three types are …\nA <code>GenericByteViewArray</code> of <code>[u8]</code>\nAn array of boolean values\nthe corresponding Arrow data type of this primitive type.\nA <code>PrimitiveArray</code> of days since UNIX epoch stored as <code>i32</code>\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of 128-bit fixed point decimals\nA <code>PrimitiveArray</code> of 256-bit fixed point decimals\nAn array of dictionary encoded values\nA <code>PrimitiveArray</code> of elapsed durations in microseconds\nA <code>PrimitiveArray</code> of elapsed durations in milliseconds\nA <code>PrimitiveArray</code> of elapsed durations in nanoseconds\nA <code>PrimitiveArray</code> of elapsed durations in seconds\nAn array of fixed size binary arrays\nAn array of [fixed length lists], similar to JSON arrays …\nA <code>PrimitiveArray</code> of <code>f16</code>\nA <code>PrimitiveArray</code> of <code>f32</code>\nA <code>PrimitiveArray</code> of <code>f64</code>\nA <code>GenericBinaryArray</code> for storing <code>[u8]</code>\nAn array of variable length byte arrays\nVariable-size Binary View Layout: An array of variable …\nAn array of variable length lists, similar to JSON arrays …\nAn array of variable length lists, specifically in the …\nA <code>GenericByteArray</code> for storing <code>str</code>\nTrue for 64 bit offset size and false for 32 bit offset …\nA <code>PrimitiveArray</code> of <code>i16</code>\nA <code>DictionaryArray</code> indexed by <code>i16</code>\nA <code>RunArray</code> with <code>i16</code> run ends\nA <code>PrimitiveArray</code> of <code>i32</code>\nA <code>DictionaryArray</code> indexed by <code>i32</code>\nA <code>RunArray</code> with <code>i32</code> run ends\nA <code>PrimitiveArray</code> of <code>i64</code>\nA <code>DictionaryArray</code> indexed by <code>i64</code>\nA <code>RunArray</code> with <code>i64</code> run ends\nA <code>PrimitiveArray</code> of <code>i8</code>\nA <code>DictionaryArray</code> indexed by <code>i8</code>\nA <code>PrimitiveArray</code> of “calendar” intervals in days and …\nA <code>PrimitiveArray</code> of “calendar” intervals in  months, …\nA <code>PrimitiveArray</code> of “calendar” intervals in whole …\nThe Arrow type of the element being accessed.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nA <code>GenericListViewArray</code> of variable size lists, storing …\nA <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nA <code>GenericListViewArray</code> of variable size lists, storing …\nAn array of key-value maps\nCorresponding Rust native type for the primitive type.\nAn optional primitive value\nAn array of null values\nA type that can be used within a variable-size array to …\nPrefix for the offset size\nAn array of primitive values, of type <code>ArrowPrimitiveType</code>\nAn array of run-end encoded values\nA <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets\nA trait for Arrow String Arrays, currently three types are …\nA <code>GenericByteViewArray</code> that stores utf8 data\nAn array of structs\nA <code>PrimitiveArray</code> of milliseconds since midnight stored as …\nA <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>\nA <code>PrimitiveArray</code> of microseconds since midnight stored as …\nA <code>PrimitiveArray</code> of nanoseconds since midnight stored as …\nA <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …\nA <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>\nA <code>DictionaryArray</code> typed on its child values array\nA <code>RunArray</code> typed typed on its child values array\nA <code>PrimitiveArray</code> of <code>u16</code>\nA <code>DictionaryArray</code> indexed by <code>u16</code>\nA <code>PrimitiveArray</code> of <code>u32</code>\nA <code>DictionaryArray</code> indexed by <code>u32</code>\nA <code>PrimitiveArray</code> of <code>u64</code>\nA <code>DictionaryArray</code> indexed by <code>u64</code>\nA <code>PrimitiveArray</code> of <code>u8</code>\nA <code>DictionaryArray</code> indexed by <code>u8</code>\nAn array of values of varying types\nReturns the array as <code>Any</code> so that it can be downcasted to a …\nReturns a reference to the <code>DataType</code> of this array.\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory pointed to by …\nReturns the underlying data of this array\nReturns true if all data within this string array is ASCII\nReturns whether this array is empty.\nConstructs a new iterator\nConstructs a new iterator\nReturns the primitive keys of this dictionary as an <code>Array</code>\nReturns the length (i.e., number of elements) of this …\nConstructs an array using the input <code>data</code>. Returns a …\nCorresponding Rust native type if available\nCreates a new empty array\nCreates a new array of <code>data_type</code> of length <code>length</code> filled …\nReturns the keys of this dictionary as usize\nReturns the null buffer of this array if any.\nReturns the offset into the underlying data used by this …\nReturns a zero-copy slice of this array with the indicated …\nReturns the underlying data of this array\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>\nReturns the values of this dictionary\nCreate a new <code>DictionaryArray</code> replacing <code>values</code> with the new …\nTrait for dealing with different array builders at runtime\nBuilder for <code>BinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>BinaryArray</code>\nBuilder for <code>RunArray</code> of <code>BinaryArray</code>\nArray builder for <code>BinaryViewArray</code>\nBuilder for <code>BooleanBuffer</code>\nBuilder for <code>BooleanArray</code>\nBuilder for creating a Buffer object.\nBuffer builder for 32-bit date type.\nA 32-bit date array builder.\nBuffer builder for 64-bit date type.\nA 64-bit date array builder.\nBuffer builder for 128-bit decimal type.\nA decimal 128 array builder\nBuffer builder for 256-bit decimal type.\nA decimal 256 array builder\nBuffer builder for elaspsed time of microseconds unit.\nAn elapsed time in microseconds array builder.\nBuffer builder for elaspsed time of milliseconds unit.\nAn elapsed time in milliseconds array builder.\nBuffer builder for elaspsed time of nanoseconds unit.\nAn elapsed time in nanoseconds array builder.\nBuffer builder for elaspsed time of second unit.\nAn elapsed time in seconds array builder.\nBuilder for <code>FixedSizeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>FixedSizeBinaryArray</code>\nBuilder for <code>FixedSizeListArray</code>\nBuffer builder for 16-bit floating point type.\nA 16-bit floating point array builder.\nBuffer builder for 32-bit floating point type.\nA 32-bit floating point array builder.\nBuffer builder for 64-bit floating point type.\nA 64-bit floating point array builder.\nArray builder for <code>GenericBinaryArray</code>\nBuilder for <code>GenericByteArray</code>\nBuilder for <code>DictionaryArray</code> of <code>GenericByteArray</code>\nBuilder for <code>RunArray</code> of <code>GenericByteArray</code>\nA builder for <code>GenericByteViewArray</code>\nBuilder for <code>GenericListArray</code>\nBuilder for <code>GenericListViewArray</code>\nArray builder for <code>GenericStringArray</code>\nBuffer builder for signed 16-bit integer type.\nA signed 16-bit integer array builder.\nBuffer builder for signed 32-bit integer type.\nA signed 32-bit integer array builder.\nBuffer builder for signed 64-bit integer type.\nA signed 64-bit integer array builder.\nBuffer builder for signed 8-bit integer type.\nA signed 8-bit integer array builder.\nBuffer builder for “calendar” interval in days and …\nA “calendar” interval in days and milliseconds array …\nBuffer builder “calendar” interval in months, days, …\nA “calendar” interval in months, days, and nanoseconds …\nBuffer builder for “calendar” interval in months.\nA “calendar” interval in months array builder.\nBuilder for <code>LargeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>RunArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>LargeListArray</code>\nBuilder for <code>LargeListViewArray</code>\nBuilder for <code>LargeStringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeStringArray</code>\nBuilder for <code>RunArray</code> of <code>LargeStringArray</code>\nBuilder for <code>ListArray</code>\nBuilder for <code>ListViewArray</code>\nBuilder for <code>MapArray</code>\nThe <code>Field</code> names for a <code>MapArray</code>\nBuilder for creating <code>NullBuffer</code>\nBuilder for <code>NullArray</code>\nBuilder of <code>OffsetBuffer</code>\nBuilder for <code>PrimitiveArray</code>\nBuilder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>\nBuilder for <code>RunArray</code> of <code>PrimitiveArray</code>\nBuilder for <code>StringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>StringArray</code>\nBuilder for <code>RunArray</code> of <code>StringArray</code>\nArray builder for <code>StringViewArray</code>\nBuilder for <code>StructArray</code>\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in milliseconds array builder.\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in seconds array builder.\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in microseconds array builder.\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in nanoseconds array builder.\nBuffer builder for timestamp type of microsecond unit.\nA timestamp microsecond array builder.\nBuffer builder for timestamp type of millisecond unit.\nA timestamp millisecond array builder.\nBuffer builder for timestamp type of nanosecond unit.\nA timestamp nanosecond array builder.\nBuffer builder for timestamp type of second unit.\nA timestamp second array builder.\nBuffer builder for usigned 16-bit integer type.\nAn usigned 16-bit integer array builder.\nBuffer builder for usigned 32-bit integer type.\nAn usigned 32-bit integer array builder.\nBuffer builder for usigned 64-bit integer type.\nAn usigned 64-bit integer array builder.\nBuffer builder for usigned 8-bit integer type.\nAn usigned 8-bit integer array builder.\nBuilder for <code>UnionArray</code>\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\n<code>Field</code> name for map entries\nBuilds the array\nBuilds the array without resetting the underlying builder.\nReturns the boxed builder as a box of <code>Any</code>.\n<code>Field</code> name for map key\nReturns the number of array slots in the builder\nReturns a builder with capacity for <code>capacity</code> elements of …\nCreate a view based on the given data, block id and offset.\n<code>Field</code> name for map value\nAn extension trait for <code>dyn Array</code> that provides ergonomic …\nDowncasts this to a <code>AnyDictionaryArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>BooleanArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericByteViewArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericByteArray</code> returning <code>None</code> if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>DictionaryArray</code> returning <code>None</code> if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>FixedSizeListArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericListViewArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to <code>MapArray</code>…\nDowncast this to a <code>MapArray</code> returning <code>None</code> if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code>, to …\nDowncast this to a <code>PrimitiveArray</code> returning <code>None</code> if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>StructArray</code> returning <code>None</code> if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>UnionArray</code> returning <code>None</code> if not …\nDowncasts a <code>dyn Array</code> to a concrete type\nABI-compatible struct for ArrowArray from C Data Interface …\nABI-compatible struct for <code>ArrowSchema</code> from C Data Interface\nExports an array to raw pointers of the C Data Interface …\nImport ArrayData from the C Data Interface\nImport ArrayData from the C Data Interface\nExport to the C Data Interface\nA <code>RecordBatchReader</code> which imports Arrays from …\nABI-compatible struct for <code>ArrayStream</code> from C Stream …\nC function to get the error from last operation on the …\nC function to get next array from the stream\nC function to get schema from the stream\nPrivate data used by the stream\nC function to release the stream\nAn iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nThe <code>RunArrayIter</code> provides an idiomatic way to iterate over …\nNumber of microseconds in a second\nNumber of microseconds in a day\nNumber of milliseconds in a second\nNumber of milliseconds in a day\nNumber of nanoseconds in a second\nNumber of nanoseconds in a day\nNumber of seconds in a day\nConstant from chrono crate\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveDate</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveDateTime</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>DateTime&lt;Tz&gt;</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>Duration</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveTime</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>\nconverts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveDateTime</code>\nconverts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveDateTime</code>\nconverts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(ms)</code>\nconverts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(s)</code>\nconverts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(ns)</code>\nconverts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(us)</code>\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nSimilar to timestamp_s_to_datetime but only compute <code>date</code>\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nSimilar to timestamp_s_to_datetime but only compute <code>time</code>\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nAn Arrow <code>TimeZone</code>\nAn <code>Offset</code> for <code>Tz</code>\nA subtype of primitive type that represents legal …\nTrait for primitive values.\nA subtype of primitive type that represents temporal …\nA timestamp type allows us to create array builders that …\nWidth of the type\nAn arrow binary array with i32 offsets\n<code>BinaryViewType</code> for string arrays\nA boolean datatype\nA trait over the variable-size byte array types\nA trait over the variable length bytes view array types\nthe corresponding Arrow data type of this primitive type.\nDatatype of array elements\nDefault values for <code>DataType</code>\n32-bit date type: the elapsed time since UNIX epoch in …\n64-bit date type: the elapsed time since UNIX epoch in …\nThe decimal type for a Decimal128Array\nThe decimal type for a Decimal256Array\nA trait over the decimal types, used by <code>PrimitiveArray</code> to …\nElapsed time type: microseconds.\nElapsed time type: milliseconds.\nElapsed time type: nanoseconds.\nElapsed time type: seconds.\n16-bit floating point number type.\n32-bit floating point number type.\n64-bit floating point number type.\n<code>ByteArrayType</code> for binary arrays\n<code>ByteArrayType</code> for string arrays\nIf element in array is utf8 encoded string.\nSigned 16-bit integer type.\nSigned 32-bit integer type.\nSigned 64-bit integer type.\nA signed 8-bit integer type.\nValue of an IntervalDayTime array\n“Calendar” interval type: days and milliseconds. See …\nValue of an IntervalMonthDayNano array\n“Calendar” interval type: months, days, and …\n32-bit “calendar” interval type: the number of whole …\nAn arrow binary array with i64 offsets\nAn arrow utf8 array with i64 offsets\nMaximum number of significant digits\nMaximum no of digits after the decimal point (note the …\nCorresponding Rust native type for the primitive type.\nType for representing its equivalent rust type i.e …\nType for representing its equivalent rust type i.e …\nType of offset i.e i32/i64\nType for owned corresponding to <code>Native</code>\n“Decimal128” or “Decimal256”, for use in error …\n“Binary” or “String”, for use in error messages\n“Binary” or “String”, for use in displayed or …\nA subtype of primitive type that is used as run-ends index …\n<code>ByteViewType</code> for string arrays\nfn to create its <code>DataType</code>\n32-bit time type: the elapsed time since midnight in …\n32-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\nTimestamp microsecond type with an optional timezone.\nTimestamp millisecond type with an optional timezone.\nTimestamp nanosecond type with an optional timezone.\nTimestamp second type with an optional timezone.\nUnsigned 16-bit integer type.\nUnsigned 32-bit integer type.\nUnsigned 64-bit integer type.\nUnsigned 8-bit integer type.\nThe <code>TimeUnit</code> of this timestamp.\nAn arrow utf8 array with i32 offsets\nNumber of days\nNumber of days\nFormats the decimal value with the provided precision and …\nDetermines whether <code>value</code> contains no more than <code>precision</code> …\nCreates a ArrowTimestampType::Native from the provided …\nNumber of milliseconds\nNumber of months\nNumber of nanoseconds\nVerifies that every consecutive pair of <code>offsets</code> denotes a …\nVerifies that the provided buffers are valid for this …\nValidates that <code>value</code> contains no more than <code>precision</code> …\nValidate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>\nA slice-able <code>Buffer</code> containing bit-packed booleans\nA contiguous memory region that can be shared with other …\nA <code>MutableBuffer</code> is Arrow’s interface to build a <code>Buffer</code> …\nA <code>BooleanBuffer</code> used to encode validity for Arrow arrays\nA non-empty buffer of monotonically increasing, positive …\nA slice-able buffer of monotonically increasing, positive …\nA strongly-typed <code>Buffer</code> supporting zero-copy cloning and …\nApply a bitwise operation <code>op</code> to two inputs and return the …\nApply a bitwise operation <code>op</code> to four inputs and return the …\nApply a bitwise operation <code>op</code> to one input and return the …\nApply a bitwise and to two inputs and return the result as …\nApply a bitwise and_not to two inputs and return the …\nApply a bitwise or to two inputs and return the result as …\nApply a bitwise xor to two inputs and return the result as …\nApply a bitwise not to one input and return the result as …\nCastOptions provides a way to override the default cast …\nValid parts to extract from date/time/timestamp arrays.\nDay of the month, in range <code>1..=31</code>\nDay of the week, in range <code>0..=6</code>, where Monday is <code>0</code>\nDay of the week, in range <code>0..=6</code>, where Sunday is <code>0</code>\nDay of year, in range <code>1..=366</code>\nFunction that can filter arbitrary arrays\nA builder to construct <code>FilterPredicate</code>\nA filtering predicate that can be applied to an <code>Array</code>\nHour of the day, in range <code>0..=23</code>\nA lexicographical comparator that wraps given array data …\nMicrosecond of the second\nMillisecond of the second\nMinute of the hour, in range <code>0..=59</code>\nMonth in the year, in range <code>1..=12</code>\nNanosecond of the second\nA computed set of partitions, see <code>partition</code>\nQuarter of the year, in range <code>1..=4</code>\nSecond of the minute, in range <code>0..=59</code>\nAn iterator of <code>(usize, usize)</code> each representing an interval\nOne column to be used in lexicographical sort\nOptions that define the sort order of a given column\nA trait for Arrow String Arrays, currently three types are …\nOptions that define how <code>take</code> should behave\nweek of the year, in range <code>1..=53</code>, computed as per ISO 8601\nISO week of the year, in range <code>1..=53</code>\nCalendar year\nISO year, computed as per ISO 8601\nPerforms <code>AND</code> operation on two arrays. If either left or …\nLogical ‘and’ boolean values with Kleene logic\nPerforms <code>AND_NOT</code> operation on two arrays. If either left …\nAllies a binary infallable function to two <code>PrimitiveArray</code>s,\nApplies a binary and infallible function to values in two …\nReturns the bitwise and of all non-null input values.\nReturns the bitwise or of all non-null input values.\nReturns the bitwise xor of all non-null input values.\nReturns true if all non-null input values are true, …\nReturns true if any non-null input value is true, …\nReturns a prepared function optimized to filter multiple …\nReturn true if a value of type <code>from_type</code> can be cast into …\nCast <code>array</code> to the provided data type and return a new …\nTry to cast <code>array</code> to <code>to_type</code> if possible.\nPerform bounds check before taking indices from values. If …\nConcatenate multiple Array of the same type into a single …\nConcatenates <code>batches</code> together into a single <code>RecordBatch</code>.\nPerform SQL <code>CONTAINS(left, right)</code>\nGiven an array, return a new array with the extracted …\nExtracts the day of a given temporal primitive array as an …\nExtracts the day of a given temporal array as an array of …\nWhether to sort in descending order\nExtracts the day of year of a given temporal primitive …\nExtracts the day of year of a given temporal array as an …\nPerform SQL <code>ENDSWITH(left, right)</code>\nReturns a filtered <code>values</code> Array where the corresponding …\nReturns a filtered RecordBatch where the corresponding …\nFormatting options when casting from temporal types to …\nExtracts the hours of a given temporal primitive array as …\nExtracts the hours of a given array as an array of …\nPerform SQL <code>left ILIKE right</code>\nChecks if a <code>GenericListArray</code> contains a value in the …\nChecks if a <code>GenericListArray</code> contains a value in the …\nTakes elements by index from a list of <code>Array</code>, creating a …\nInterleave rows by index from multiple <code>RecordBatch</code> …\nReturns true if all data within this string array is ASCII\nReturns a non-null BooleanArray with whether each value of …\nReturns a non-null BooleanArray with whether each value of …\nConstructs a new iterator\nComputation kernels on Arrow Arrays\nSort a list of <code>ArrayRef</code> using <code>SortOptions</code> provided for …\nSort elements lexicographically from a list of <code>ArrayRef</code> …\nPerform SQL <code>left LIKE right</code>\nReturns the maximum value in the array, according to the …\nReturns the max of values in the array of <code>ArrowNumericType</code> …\nReturns the maximum value in the binary array, according …\nReturns the maximum value in the binary view array, …\nReturns the maximum value in the boolean array\nReturns the maximum value in the string array, according …\nReturns the maximum value in the string view array, …\nExtracts the microseconds of a given temporal primitive …\nExtracts the microseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nReturns the minimum value in the array, according to the …\nReturns the min of values in the array of <code>ArrowNumericType</code> …\nReturns the minimum value in the binary array, according …\nReturns the minimum value in the binary view array, …\nReturns the minimum value in the boolean array.\nReturns the minimum value in the string array, according …\nReturns the minimum value in the string view array, …\nExtracts the minutes of a given temporal primitive array …\nExtracts the minutes of a given temporal array as an array …\nExtracts the month of a given temporal primitive array as …\nExtracts the month of a given temporal array as an array …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nExtracts the nanoseconds of a given temporal primitive …\nExtracts the nanoseconds of a given temporal primitive …\nPerform SQL <code>left NOT ILIKE right</code>\nPerform SQL <code>left NOT LIKE right</code>\nPerforms unary <code>NOT</code> operation on an arrays. If value is …\nReturns a new array with the same values and the validity …\nWhether to sort nulls first\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nSort options for this column\nPerforms <code>OR</code> operation on two arrays. If either left or …\nLogical ‘or’ boolean values with Kleene logic\nIt’s unstable_sort, may not preserve the order of equal …\nGiven a list of lexicographically sorted columns, computes …\nRemove null values by do a bitmask AND operation with null …\nExtracts the quarter of a given temporal primitive array …\nExtracts the quarter of a given temporal array as an array …\nAssigns a rank to each value in <code>array</code> based on its …\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nExtract all groups matched by a regular expression for a …\nhow to handle cast failures, either return NULL …\nExtracts the seconds of a given temporal primitive array …\nExtracts the seconds of a given temporal array as an array …\nShifts array by defined number of items (to left or right) …\nSort the <code>ArrayRef</code> using <code>SortOptions</code>.\nSort the <code>ArrayRef</code> partially.\nSort elements from <code>ArrayRef</code> into an unsigned integer (…\nPerform SQL <code>STARTSWITH(left, right)</code>\nReturns the sum of values in the primitive array.\nReturns the sum of values in the array.\nReturns the sum of values in the array.\nReturns the sum of values in the primitive array.\nTake elements by index from Array, creating a new Array …\nFor each ArrayRef in the <code>Vec&lt;ArrayRef&gt;</code>, take elements by …\nTake rows by index from <code>RecordBatch</code> and returns a new …\nApplies the provided fallible binary operation across <code>a</code> …\nApplies the provided fallible binary operation across <code>a</code> …\nSee <code>PrimitiveArray::try_unary</code>\nSee <code>PrimitiveArray::try_unary_mut</code>\nSee <code>PrimitiveArray::unary</code>\nSee <code>PrimitiveArray::unary_mut</code>\nReturns the value of the target field when selected, or …\nThe column to sort\nExtracts the week of a given temporal primitive array as …\nExtracts the week of a given temporal array as an array of …\nExtracts the years of a given temporal primitive array as …\nExtracts the years of a given temporal array as an array …\nDefines aggregations over Arrow arrays.\nKernels for operating on <code>PrimitiveArray</code>s\nModule contains bitwise operations on arrays\nDefines boolean kernels on Arrow <code>BooleanArray</code>’s, e.g. <code>AND</code>…\nCast kernels to convert <code>ArrayRef</code>  between supported …\nCast <code>array</code> to the provided data type and return a new …\n<code>Parser</code> implementations for converting strings to Arrow …\nComparison kernels for <code>Array</code>s.\nComparison kernels for <code>Array</code>s.\nDefines concat kernel for <code>ArrayRef</code>\nProvides utility functions for concatenation of elements …\nDefines filter kernels\nInterleave elements from multiple arrays\nDefines kernel for length of string arrays and binary …\nImplements the <code>nullif</code> function for Arrow arrays.\nDefines numeric arithmetic kernels on <code>PrimitiveArray</code>, such …\nDefines partition kernel for <code>ArrayRef</code>\nProvides <code>rank</code> function to assign a rank to each value in …\nDefines kernel to extract substrings based on a regular …\nDefines sort kernel for <code>ArrayRef</code>\nDefines kernel to extract a substring of an Array …\nDefines take kernel for Array\nDefines temporal kernels for time and date related …\nDefines union_extract kernel for UnionArray\nDefines windowing functions, like <code>shift</code>ing\n<code>zip</code>: Combine values from two arrays based on boolean mask\nReturns the bitwise and of all non-null input values.\nReturns the bitwise or of all non-null input values.\nReturns the bitwise xor of all non-null input values.\nReturns true if all non-null input values are true, …\nReturns true if any non-null input value is true, …\nReturns the maximum value in the array, according to the …\nReturns the max of values in the array of <code>ArrowNumericType</code> …\nReturns the maximum value in the binary array, according …\nReturns the maximum value in the binary view array, …\nReturns the maximum value in the boolean array\nReturns the maximum value in the string array, according …\nReturns the maximum value in the string view array, …\nReturns the minimum value in the array, according to the …\nReturns the min of values in the array of <code>ArrowNumericType</code> …\nReturns the minimum value in the binary array, according …\nReturns the minimum value in the binary view array, …\nReturns the minimum value in the boolean array.\nReturns the minimum value in the string array, according …\nReturns the minimum value in the string view array, …\nReturns the sum of values in the primitive array.\nReturns the sum of values in the array.\nReturns the sum of values in the array.\nReturns the sum of values in the primitive array.\nAllies a binary infallable function to two <code>PrimitiveArray</code>s,\nApplies a binary and infallible function to values in two …\nApplies the provided fallible binary operation across <code>a</code> …\nApplies the provided fallible binary operation across <code>a</code> …\nSee <code>PrimitiveArray::try_unary</code>\nSee <code>PrimitiveArray::try_unary_mut</code>\nSee <code>PrimitiveArray::unary</code>\nSee <code>PrimitiveArray::unary_mut</code>\nPerform <code>left &amp; right</code> operation on two arrays. If either …\nPerform <code>left &amp; !right</code> operation on two arrays. If either …\nPerform bitwise <code>and</code> every value in an array with the …\nPerform <code>!array</code> operation on array. If array value is null …\nPerform <code>left | right</code> operation on two arrays. If either …\nPerform bitwise <code>or</code> every value in an array with the …\nPerform bitwise <code>left &lt;&lt; right</code> operation on two arrays. If …\nPerform bitwise <code>left &lt;&lt; right</code> every value in an array with …\nPerform bitwise <code>left &gt;&gt; right</code> operation on two arrays. If …\nPerform bitwise <code>left &gt;&gt; right</code> every value in an array with …\nPerform <code>left ^ right</code> operation on two arrays. If either …\nPerform bitwise <code>xor</code> every value in an array with the …\nPerforms <code>AND</code> operation on two arrays. If either left or …\nLogical ‘and’ boolean values with Kleene logic\nPerforms <code>AND_NOT</code> operation on two arrays. If either left …\nReturns a non-null BooleanArray with whether each value of …\nReturns a non-null BooleanArray with whether each value of …\nPerforms unary <code>NOT</code> operation on an arrays. If value is …\nPerforms <code>OR</code> operation on two arrays. If either left or …\nLogical ‘or’ boolean values with Kleene logic\nCastOptions provides a way to override the default cast …\nReturn true if a value of type <code>from_type</code> can be cast into …\nCast <code>array</code> to the provided data type and return a new …\nTry to cast <code>array</code> to <code>to_type</code> if possible.\nFormatting options when casting from temporal types to …\nhow to handle cast failures, either return NULL …\nA Century\nA Day\nA Decade\nAn Hour\nConfig to parse interval strings\nRepresents the units of an interval, with each variant …\nA Microsecond\nA Millisecond\nA Minute\nA Month\nA tuple representing (months, days, nanoseconds) in an …\nA Nanosecond\nSpecialized parsing implementations to convert strings to …\nA Second\nA Week\nA Year\nParse a string to the native type\nParse the string format decimal value to i128/i256 format …\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nAccepts a string and parses it relative to the provided …\nAccepts a string in ISO8601 standard format and some …\nAccepts a string in RFC3339 / ISO8601 standard format and …\nCompares two <code>GenericByteViewArray</code> at index <code>left_idx</code> and …\nComparing two <code>GenericByteViewArray</code> at index <code>left_idx</code> and …\nPerform <code>left IS DISTINCT FROM right</code> operation on two <code>Datum</code>\nPerform <code>left == right</code> operation on two <code>Datum</code>.\nPerform <code>left &gt; right</code> operation on two <code>Datum</code>.\nPerform <code>left &gt;= right</code> operation on two <code>Datum</code>.\nPerform <code>left &lt; right</code> operation on two <code>Datum</code>.\nPerform <code>left &lt;= right</code> operation on two <code>Datum</code>.\nPerform <code>left != right</code> operation on two <code>Datum</code>.\nPerform <code>left IS NOT DISTINCT FROM right</code> operation on two …\nA trait for Arrow String Arrays, currently three types are …\nPerform SQL <code>CONTAINS(left, right)</code>\nPerform SQL <code>ENDSWITH(left, right)</code>\nPerform SQL <code>left ILIKE right</code>\nChecks if a <code>GenericListArray</code> contains a value in the …\nChecks if a <code>GenericListArray</code> contains a value in the …\nReturns true if all data within this string array is ASCII\nConstructs a new iterator\nPerform SQL <code>left LIKE right</code>\nPerform SQL <code>left NOT ILIKE right</code>\nPerform SQL <code>left NOT LIKE right</code>\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>STARTSWITH(left, right)</code>\nConcatenate multiple Array of the same type into a single …\nConcatenates <code>batches</code> together into a single <code>RecordBatch</code>.\nReturns the elementwise concatenation of a …\nReturns the elementwise concatenation of a <code>GenericByteArray</code>…\nReturns the elementwise concatenation of <code>Array</code>s.\nReturns the elementwise concatenation of a …\nReturns the elementwise concatenation of <code>StringArray</code>.\nFunction that can filter arbitrary arrays\nA builder to construct <code>FilterPredicate</code>\nA filtering predicate that can be applied to an <code>Array</code>\nAn iterator of <code>(usize, usize)</code> each representing an interval\nReturns a prepared function optimized to filter multiple …\nReturns a filtered <code>values</code> Array where the corresponding …\nReturns a filtered RecordBatch where the corresponding …\nRemove null values by do a bitmask AND operation with null …\nTakes elements by index from a list of <code>Array</code>, creating a …\nInterleave rows by index from multiple <code>RecordBatch</code> …\nReturns an array of Int32/Int64 denoting the number of …\nReturns an array of Int32/Int64 denoting the length of …\nReturns a new array with the same values and the validity …\nPerform <code>lhs + rhs</code>, returning an error on overflow\nPerform <code>lhs + rhs</code>, wrapping on overflow for …\nPerform <code>lhs / rhs</code>\nPerform <code>lhs * rhs</code>, returning an error on overflow\nPerform <code>lhs * rhs</code>, wrapping on overflow for …\nNegates each element of  <code>array</code>, returning an error on …\nNegates each element of  <code>array</code>, wrapping on overflow for …\nPerform <code>lhs % rhs</code>\nPerform <code>lhs - rhs</code>, returning an error on overflow\nPerform <code>lhs - rhs</code>, wrapping on overflow for …\nA computed set of partitions, see <code>partition</code>\nGiven a list of lexicographically sorted columns, computes …\nAssigns a rank to each value in <code>array</code> based on its …\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nExtract all groups matched by a regular expression for a …\nA lexicographical comparator that wraps given array data …\nOne column to be used in lexicographical sort\nOptions that define the sort order of a given column\nWhether to sort in descending order\nSort a list of <code>ArrayRef</code> using <code>SortOptions</code> provided for …\nSort elements lexicographically from a list of <code>ArrayRef</code> …\nWhether to sort nulls first\nSort options for this column\nIt’s unstable_sort, may not preserve the order of equal …\nSort the <code>ArrayRef</code> using <code>SortOptions</code>.\nSort the <code>ArrayRef</code> partially.\nSort elements from <code>ArrayRef</code> into an unsigned integer (…\nThe column to sort\nReturns an <code>ArrayRef</code> with substrings of all the elements in …\nSubstrings based on character index\nOptions that define how <code>take</code> should behave\nPerform bounds check before taking indices from values. If …\nTake elements by index from Array, creating a new Array …\nFor each ArrayRef in the <code>Vec&lt;ArrayRef&gt;</code>, take elements by …\nTake rows by index from <code>RecordBatch</code> and returns a new …\nValid parts to extract from date/time/timestamp arrays.\nDay of the month, in range <code>1..=31</code>\nDay of the week, in range <code>0..=6</code>, where Monday is <code>0</code>\nDay of the week, in range <code>0..=6</code>, where Sunday is <code>0</code>\nDay of year, in range <code>1..=366</code>\nHour of the day, in range <code>0..=23</code>\nMicrosecond of the second\nMillisecond of the second\nMinute of the hour, in range <code>0..=59</code>\nMonth in the year, in range <code>1..=12</code>\nNanosecond of the second\nQuarter of the year, in range <code>1..=4</code>\nSecond of the minute, in range <code>0..=59</code>\nweek of the year, in range <code>1..=53</code>, computed as per ISO 8601\nISO week of the year, in range <code>1..=53</code>\nCalendar year\nISO year, computed as per ISO 8601\nGiven an array, return a new array with the extracted …\nExtracts the day of a given temporal primitive array as an …\nExtracts the day of a given temporal array as an array of …\nExtracts the day of year of a given temporal primitive …\nExtracts the day of year of a given temporal array as an …\nExtracts the hours of a given temporal primitive array as …\nExtracts the hours of a given array as an array of …\nExtracts the microseconds of a given temporal primitive …\nExtracts the microseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nExtracts the minutes of a given temporal primitive array …\nExtracts the minutes of a given temporal array as an array …\nExtracts the month of a given temporal primitive array as …\nExtracts the month of a given temporal array as an array …\nExtracts the nanoseconds of a given temporal primitive …\nExtracts the nanoseconds of a given temporal primitive …\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nExtracts the quarter of a given temporal primitive array …\nExtracts the quarter of a given temporal array as an array …\nExtracts the seconds of a given temporal primitive array …\nExtracts the seconds of a given temporal array as an array …\nExtracts the week of a given temporal primitive array as …\nExtracts the week of a given temporal array as an array of …\nExtracts the years of a given temporal primitive array as …\nExtracts the years of a given temporal array as an array …\nReturns the value of the target field when selected, or …\nShifts array by defined number of items (to left or right) …\nZip two arrays by some boolean mask.\nCSV file reader using <code>std::io::BufReader</code>\nCSV file reader builder\nA CSV writer\nA CSV writer builder\nInfer schema from a list of CSV files by reading through …\nCSV Reader\nCSV Writer\nCSV file reader\nA push-based interface for decoding CSV data from an …\nThe format specification for the CSV file\nCSV file reader using <code>std::io::BufReader</code>\nCSV file reader builder\nInfer schema from a list of CSV files by reading through …\nA CSV writer\nA CSV writer builder\nA subtype of primitive type that represents legal …\nTrait expressing a Rust type that has the same in-memory …\nTrait for <code>ArrowNativeType</code> that adds checked and unchecked …\nA subtype of primitive type that represents numeric values.\nTrait for primitive values.\nA subtype of primitive type that represents temporal …\nA timestamp type allows us to create array builders that …\nWidth of the type\nOpaque binary data of variable length.\nAn arrow binary array with i32 offsets\nOpaque binary data of variable length.\n<code>BinaryViewType</code> for string arrays\nA boolean datatype representing the values <code>true</code> and <code>false</code>.\nA boolean datatype\nA trait over the variable-size byte array types\nA trait over the variable length bytes view array types\nthe corresponding Arrow data type of this primitive type.\nDatatype of array elements\nThe maximum precision for DataType::Decimal128 values\nThe maximum scale for DataType::Decimal128 values\nThe maximum precision for DataType::Decimal256 values\nThe maximum scale for DataType::Decimal256 values\nThe default scale for DataType::Decimal128 and …\nDefault values for <code>DataType</code>\nDatatypes supported by this implementation of Apache Arrow.\nA signed 32-bit date representing the elapsed time since …\n32-bit date type: the elapsed time since UNIX epoch in …\nA signed 64-bit date representing the elapsed time since …\n64-bit date type: the elapsed time since UNIX epoch in …\nIndicates the number of elapsed days and milliseconds, …\nExact 128-bit width decimal value with precision and scale\nThe decimal type for a Decimal128Array\nExact 256-bit width decimal value with precision and scale\nThe decimal type for a Decimal256Array\nA trait over the decimal types, used by <code>PrimitiveArray</code> to …\nDense union layout\nA dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …\nMeasure of elapsed time in either seconds, milliseconds, …\nElapsed time type: microseconds.\nElapsed time type: milliseconds.\nElapsed time type: nanoseconds.\nElapsed time type: seconds.\nDescribes a single column in a <code>Schema</code>.\nA reference counted <code>Field</code>\nA cheaply cloneable, owned slice of <code>FieldRef</code>\nOpaque binary data of fixed size. Enum parameter specifies …\nA list of some logical data type with fixed length.\nA 16-bit floating point number.\n16-bit floating point number type.\nA 32-bit floating point number.\n32-bit floating point number type.\nA 64-bit floating point number.\n64-bit floating point number type.\n<code>ByteArrayType</code> for binary arrays\n<code>ByteArrayType</code> for string arrays\nIf element in array is utf8 encoded string.\nA signed 16-bit integer.\nSigned 16-bit integer type.\nA signed 32-bit integer.\nSigned 32-bit integer type.\nA signed 64-bit integer.\nSigned 64-bit integer type.\nA signed 8-bit integer.\nA signed 8-bit integer type.\nA “calendar” interval which models types that don’t …\nValue of an IntervalDayTime array\n“Calendar” interval type: days and milliseconds. See …\nValue of an IntervalMonthDayNano array\n“Calendar” interval type: months, days, and …\nYEAR_MONTH, DAY_TIME, MONTH_DAY_NANO interval in SQL style.\n32-bit “calendar” interval type: the number of whole …\nOpaque binary data of variable length and 64-bit offsets.\nAn arrow binary array with i64 offsets\nA list of some logical data type with variable length and …\n(NOT YET FULLY SUPPORTED)  A list of some logical data …\nA variable-length string in Unicode with UFT-8 encoding …\nAn arrow utf8 array with i64 offsets\nA list of some logical data type with variable length.\n(NOT YET FULLY SUPPORTED)  A list of some logical data …\n<code>MAX_DECIMAL128_FOR_EACH_PRECISION[p]</code> holds the maximum <code>i128</code>…\n<code>MAX_DECIMAL256_FOR_EACH_PRECISION[p]</code> holds the maximum <code>i256</code>…\n<code>MAX_DECIMAL_FOR_EACH_PRECISION[p-1]</code> holds the maximum <code>i128</code> …\nMaximum number of significant digits\nMaximum no of digits after the decimal point (note the …\nThe maximum value and identity for the <code>min</code> aggregation. …\n<code>MIN_DECIMAL_FOR_EACH_PRECISION[p]</code> holds the minimum <code>i128</code> …\n<code>MIN_DECIMAL256_FOR_EACH_PRECISION[p]</code> holds the minimum <code>i256</code>…\n<code>MIN_DECIMAL_FOR_EACH_PRECISION[p-1]</code> holds the minimum <code>i128</code> …\nThe minimum value and identity for the <code>max</code> aggregation. …\nA Map is a logical nested type that is represented as\nTime in microseconds.\nTime in milliseconds.\nA triple of the number of elapsed months, days, and …\nTime in nanoseconds.\nCorresponding Rust native type for the primitive type.\nType for representing its equivalent rust type i.e …\nType for representing its equivalent rust type i.e …\nNull type\nThe multiplicative identity\nType of offset i.e i32/i64\nType for owned corresponding to <code>Native</code>\n“Decimal128” or “Decimal256”, for use in error …\n“Binary” or “String”, for use in error messages\n“Binary” or “String”, for use in displayed or …\nA run-end encoding (REE) is a variation of run-length …\nA subtype of primitive type that is used as run-ends index …\nDescribes the meta-data of an ordered sequence of relative …\nA builder to facilitate building a <code>Schema</code> from iteratively …\nA reference-counted reference to a <code>Schema</code>.\nTime in seconds.\nSparse union layout\n<code>ByteViewType</code> for string arrays\nA nested datatype that contains a number of sub-fields.\nfn to create its <code>DataType</code>\nA signed 32-bit time representing the elapsed time since …\n32-bit time type: the elapsed time since midnight in …\n32-bit time type: the elapsed time since midnight in …\nA signed 64-bit time representing the elapsed time since …\n64-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\nAn absolute length of time in seconds, milliseconds, …\nA timestamp with an optional timezone.\nTimestamp microsecond type with an optional timezone.\nTimestamp millisecond type with an optional timezone.\nTimestamp nanosecond type with an optional timezone.\nTimestamp second type with an optional timezone.\nAllows conversion from supported Arrow types to a byte …\nAn unsigned 16-bit integer.\nUnsigned 16-bit integer type.\nAn unsigned 32-bit integer.\nUnsigned 32-bit integer type.\nAn unsigned 64-bit integer.\nUnsigned 64-bit integer type.\nAn unsigned 8-bit integer.\nUnsigned 8-bit integer type.\nThe <code>TimeUnit</code> of this timestamp.\nA nested datatype that can represent slots of differing …\nA cheaply cloneable, owned collection of <code>FieldRef</code> and …\nSparse or Dense union layouts\nA variable-length string in Unicode with UTF-8 encoding.\nAn arrow utf8 array with i32 offsets\nA variable-length string in Unicode with UTF-8 encoding\nIndicates the number of elapsed whole months, stored as …\nThe additive identity\nChecked addition operation\nWrapping addition operation\nConvert to usize according to the <code>as</code> operator\nCompare operation\nNumber of days\nNumber of days\nChecked division operation\nWrapping division operation\nA sequence of fields that describe the schema.\nFormats the decimal value with the provided precision and …\nConvert native integer type from usize\nA signed 256-bit integer\nEquality operation\nDetermines whether <code>value</code> contains no more than <code>precision</code> …\nReturn true if the specified <code>i256</code> value can be properly …\nReturns true if the specified <code>i128</code> value can be properly …\nReturns true if zero else false\nCreates a ArrowTimestampType::Native from the provided …\nA map of key-value pairs containing additional meta data.\nNumber of milliseconds\nChecked remainder operation\nWrapping remainder operation\nNumber of months\nChecked multiplication operation\nWrapping multiplication operation\nNumber of nanoseconds\nChecked negation operation\nWrapping negation operation\nChecked exponentiation operation\nWrapping exponentiation operation\nChecked subtraction operation\nWrapping subtraction operation\nConverts this instance into a byte slice\nConvert native type to i64.\nConvert native type to isize.\nConvert native type to usize.\nConvert from usize according to the <code>as</code> operator\nVerifies that every consecutive pair of <code>offsets</code> denotes a …\nVerifies that the provided buffers are valid for this …\nValidates that the specified <code>i256</code> of value can be properly …\nValidates that the specified <code>i128</code> value can be properly …\nValidates that <code>value</code> contains no more than <code>precision</code> …\nValidate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>\nError when an arithmetic operation overflows.\nMany different operations in the <code>arrow</code> crate return this …\nError during import or export to/from the C Data Interface\nError during casting from one type to another.\nError during computation.\nError during CSV-related operations.\nError when a dictionary key is bigger than the key type\nError during division by zero.\nContains the error value\nWraps an external error.\nError indicating that an unexpected or bad argument was …\nError during IO operations.\nError during IPC operations in <code>arrow-ipc</code> or <code>arrow-flight</code>.\nError during JSON-related operations.\nMemory or buffer error.\nReturned when functionality is not yet available.\nContains the success value\nError during Parquet operations.\nError during parsing from a string.\nA specialized <code>Result</code> type for Arrow operations.\nError when the run end index in a REE array is bigger than …\nError during schema-related operations.\nOpaque binary data\nLogically the same as Binary, but the internal …\nOptional compression for the memory buffers constituting …\nProvided for forward compatibility in case we need to …\nA Buffer represents a single contiguous memory segment\nDate is either a 32-bit or 64-bit signed integer type …\nExact decimal value represented as an integer value in two…\nFor sending dictionary encoding information. Any Field can …\nDictionary encoding metadata Maintained for forwards …\nEndianness of the platform producing the data\nRepresents Arrow Features that might not have full support …\nA field represents a named column in a record / row batch …\nData structures for describing a table row batch (a …\nArrow File metadata\nuser defined key value pairs to add custom metadata to …\nSame as Binary, but with 64-bit offsets, allowing to …\nSame as List, but with 64-bit offsets, allowing to …\nSame as ListView, but with 64-bit offsets and sizes, …\nSame as Utf8, but with 64-bit offsets, allowing to …\nRepresents the same logical types that List can, but …\nA Map is a logical nested type that is represented as\nThe root Message type This union enables us to easily send …\nThese are stored in the flatbuffer in the Type union below\nA data header describing the shared memory layout of a “…\nContains two child arrays, run_ends and values. The …\nA Schema describes the columns in a row batch\nCompressed Sparse format, that is matrix-specific.\nEXPERIMENTAL: Data structures for sparse tensors …\nCompressed Sparse Fiber (CSF) sparse tensor index.\nA Struct_ in the flatbuffer metadata is the same as an …\nData structures for dense tensors Shape data for a single …\nTime is either a 32-bit or 64-bit signed integer type …\nTimestamp is a 64-bit signed integer representing an …\nTop-level Type value, enabling extensible type-specific …\nA union is a complex type with children in Field By …\nUnicode with UTF-8 encoding\nLogically the same as Utf8, but the internal …\nUtilities for converting between IPC types and native …\nGenerated code\nArrow IPC File and Stream Readers\nVerifies that a buffer of bytes contains a <code>Footer</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Message</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Schema</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>SparseTensor</code> …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Tensor</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nArrow IPC File and Stream Writers\nLow level Arrow Schema to IPC bytes converter\nAn owned container for a validated <code>Message</code>\nDeserialize an ipc crate::Schema` from flat buffers to an …\nPush a key-value metadata into a FlatBufferBuilder and …\nSerialize a schema in IPC format\nAdds a Schema to a flatbuffer and returns the offset\nTry deserialize flat buffer format bytes into a schema\nTry deserialize the IPC format bytes into a schema\nArrow File metadata\nVerifies that a buffer of bytes contains a <code>Footer</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nOptional compression for the memory buffers constituting …\nProvided for forward compatibility in case we need to …\nFor sending dictionary encoding information. Any Field can …\nData structures for describing a table row batch (a …\nThe root Message type This union enables us to easily send …\nA data header describing the shared memory layout of a “…\nVerifies that a buffer of bytes contains a <code>Message</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nOpaque binary data\nLogically the same as Binary, but the internal …\nA Buffer represents a single contiguous memory segment\nDate is either a 32-bit or 64-bit signed integer type …\nExact decimal value represented as an integer value in two…\nDictionary encoding metadata Maintained for forwards …\nEndianness of the platform producing the data\nRepresents Arrow Features that might not have full support …\nA field represents a named column in a record / row batch …\nuser defined key value pairs to add custom metadata to …\nSame as Binary, but with 64-bit offsets, allowing to …\nSame as List, but with 64-bit offsets, allowing to …\nSame as ListView, but with 64-bit offsets and sizes, …\nSame as Utf8, but with 64-bit offsets, allowing to …\nRepresents the same logical types that List can, but …\nA Map is a logical nested type that is represented as\nThese are stored in the flatbuffer in the Type union below\nContains two child arrays, run_ends and values. The …\nA Schema describes the columns in a row batch\nA Struct_ in the flatbuffer metadata is the same as an …\nTime is either a 32-bit or 64-bit signed integer type …\nTimestamp is a 64-bit signed integer representing an …\nTop-level Type value, enabling extensible type-specific …\nA union is a complex type with children in Field By …\nUnicode with UTF-8 encoding\nLogically the same as Utf8, but the internal …\nVerifies that a buffer of bytes contains a <code>Schema</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nCompressed Sparse format, that is matrix-specific.\nEXPERIMENTAL: Data structures for sparse tensors …\nCompressed Sparse Fiber (CSF) sparse tensor index.\nVerifies that a buffer of bytes contains a <code>SparseTensor</code> …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nData structures for dense tensors Shape data for a single …\nVerifies that a buffer of bytes contains a <code>Tensor</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nA low-level, push-based interface for reading an IPC file\nArrow File Reader\nBuild an Arrow <code>FileReader</code> with custom options.\nA low-level interface for reading <code>RecordBatch</code> data from a …\nArrow Stream Reader\nRead the dictionary from the buffer and provided metadata, …\nRead the footer length from the last 10 bytes of an Arrow …\nCreates a record batch from binary data using the …\nKeeps track of dictionaries that have been written, to …\nStores the encoded data, which is an crate::Message, and …\nArrow File Writer\nHandles low level details of encoding <code>Array</code> and <code>Schema</code> …\nIPC write options used to control the behaviour of the …\nArrow Stream Writer\nArrow buffers to be written, should be an empty vec for …\nAn encoded crate::Message\nWrite a message’s IPC data and buffers, returning …\nA JSON writer which serializes <code>RecordBatch</code>es to JSON …\nTrait declaring any type that is serializable to JSON. …\nA JSON writer which serializes <code>RecordBatch</code>es to newline …\nEncode/decode structs as lists (e.g., [1, “c”])\nEncode/decode structs as objects (e.g., {“a”: 1, “b…\nReads JSON data with a known schema directly into arrow …\nA builder for <code>Reader</code> and <code>Decoder</code>\nSpecifies what is considered valid JSON when reading or …\nA JSON writer which serializes <code>RecordBatch</code>es to a stream of\nJSON writer builder.\nConverts self into json value if its possible\nJSON reader\nJSON Writer\nA low-level interface for reading JSON data from a byte …\nReads JSON data with a known schema directly into arrow …\nA builder for <code>Reader</code> and <code>Decoder</code>\nJSON file reader that produces a serde_json::Value …\nInfer the fields of a JSON file by reading the first n …\nInfer the fields of a JSON file by reading all items from …\nInfer the fields of a JSON file by reading the first n …\nA JSON writer which serializes <code>RecordBatch</code>es to JSON …\nProduces JSON output as a single JSON array.\nThis trait defines how to format a sequence of JSON …\nProduces JSON output with one record per line.\nA JSON writer which serializes <code>RecordBatch</code>es to newline …\nA JSON writer which serializes <code>RecordBatch</code>es to a stream of\nJSON writer builder.\nA Rust type representing an exception defined in Python …\nTrait for converting Python objects to arrow-rs types.\nConvert an arrow-rs type into a PyArrow object.\nRepresents an exception raised by PyArrow.\nA newtype wrapper for types implementing <code>FromPyArrow</code> or …\nCreate a new PyArrow object from a arrow-rs type.\nConvert a Python object to an arrow-rs type.\nConvert the implemented type into a Python object while …\nConvert the implemented type into a Python object without …\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nWrite footer or termination data, then mark the writer as …\nMatch field names of structs and lists. If set to <code>true</code>, …\nOptional row count, useful for specifying a row count for …\nReturns the schema of this <code>RecordBatchReader</code>.\nWrite a single batch to the writer.\nOwned version of a <code>Row</code> that can be moved/cloned freely.\nA comparable representation of a row.\nConverts <code>ArrayRef</code> columns into a row-oriented format.\nA <code>RowParser</code> can be created from a <code>RowConverter</code> and used to …\nA row-oriented representation of arrow data, that is …\nAn iterator over <code>Rows</code>\nConfigure the data type and sort order for a given column\nEncode dictionary values not preserving the dictionary …\nTensor of type BooleanType\nTensor of type Int8Type\nTensor of type Int16Type\nTensor of type Decimal128Type\nTensor of type Decimal256Type\nTensor of type DurationMicrosecondType\nTensor of type DurationMillisecondType\nTensor of type DurationNanosecondType\nTensor of type DurationSecondType\nTensor of type Float16Type\nTensor of type Float32Type\nTensor of type Float64Type\nTensor of type Int16Type\nTensor of type Int32Type\nTensor of type Int64Type\nTensor of type Int8Type\nTensor of type IntervalDayTimeType\nTensor of type IntervalMonthDayNanoType\nTensor of type IntervalYearMonthType\nTensor of primitive types\nTensor of type Time32MillisecondType\nTensor of type Time32SecondType\nTensor of type Time64MicrosecondType\nTensor of type Time64NanosecondType\nTensor of type TimestampMicrosecondType\nTensor of type TimestampMillisecondType\nTensor of type TimestampNanosecondType\nTensor of type TimestampSecondType\nTensor of type UInt16Type\nTensor of type UInt32Type\nTensor of type UInt64Type\nTensor of type UInt8Type\nTypes for iterating over bitmasks in 64-bit chunks\nTypes for iterating over packed bitmasks\nUtils for working with packed bit masks\nUtils for working with bits\nFunctions for printing array values as human-readable …\nUtilities for pretty printing <code>RecordBatch</code>es and <code>Array</code>s.\nString Writer This string writer encapsulates …\nIterator over chunks of 64 bits represented as an u64\nIterates over an arbitrarily aligned byte buffer\nIterates over an arbitrarily aligned byte buffer\nIterator over an <code>UnalignedBitChunk</code>\nAn iterator of <code>usize</code> whose index in a provided bitmask is …\nIterator over the bits within a packed bitmask\nIterator of contiguous ranges of set bits within a …\nCalls the provided closure for each index in the provided …\nUtil function to set bits in a slice of bytes.\nReturns the ceil of <code>value</code>/<code>divisor</code>\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nReturns the nearest number that is <code>&gt;=</code> than <code>num</code> and is a …\nReturns the nearest multiple of <code>factor</code> that is <code>&gt;=</code> than <code>num</code>…\nSets bit at position <code>i</code> for <code>data</code> to 1\nSets bit at position <code>i</code> for <code>data</code>\nSets bit at position <code>i</code> for <code>data</code> to 0\nSets bit at position <code>i</code> for <code>data</code> to 0\nA string formatter for an <code>Array</code>\nFormat for displaying durations\nOptions for formatting arrays\nISO 8601 - <code>P198DT72932.972880S</code>\nA human readable representation - …\nImplements <code>Display</code> for a specific array value\nGet the value at the given row in an array as a String.\nConverts numeric type to a <code>String</code>\nCreate a visual representation of record batches\nCreate a visual representation of record batches\nCreate a visual representation of columns\nPrints a visual representation of record batches to stdout\nPrints a visual representation of a list of column to …\nA writer that allows writing to a <code>String</code> like an …\nTUID: Time-based Unique Identifier.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nIf deprecated, this explains since when, and what to use …\nIf deprecated, this explains since when, and what to use …\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nComputes a placeholder for a given arrow datatype.\nIs this a required component?\nThe name of the field (i.e. same as …\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nChecks that the given Arrow array can be deserialized into …\nThe views that this archetype can be added to.\nA builder for creating a UUID.\nA 128-bit (16 byte) buffer containing the UUID.\nA counter that can be used by versions 1 and 6 UUIDs to …\nVersion 8: Custom.\nVersion 2: DCE Security.\nA general error that can occur when working with UUIDs.\nReserved for future expansion.\nVersion 1: Timestamp and node ID.\nThe “max” (all ones) UUID.\nVersion 3: MD5 hash.\nReserved by Microsoft for backward compatibility.\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nReserved by the NCS for backward compatibility.\nThe “nil” (all zeros) UUID.\nAn empty counter that will always return the value <code>0</code>.\nA UUID that is guaranteed not to be the nil UUID.\nThe type of sequence returned by this counter.\nAs described in the RFC 9562 Specification (default). (for …\nVersion 4: Random.\nVersion 5: SHA-1 hash.\nVersion 6: Sortable Timestamp and node ID.\nVersion 7: Timestamp and random.\nA timestamp that can be encoded into a UUID.\nA Universally Unique Identifier (UUID).\nThe reserved variants of UUIDs.\nThe version of the UUID, denoting the generating algorithm.\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nGet a borrowed <code>Simple</code> formatter.\nReturns a 128bit value containing the value.\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nGet a reference to the underlying <code>Uuid</code>.\nGet a <code>Braced</code> formatter.\nA buffer that can be used for <code>encode_...</code> calls, that is …\nAdapters for alternative string formats.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>NonNilUuid</code> back into a <code>Uuid</code>.\nReturns the argument unchanged.\nCreates a <code>Builder</code> using the supplied bytes.\nCreates a UUID using the supplied bytes.\nCreates a <code>Builder</code> using the supplied bytes in little …\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nCreates a <code>Builder</code> for a version 8 UUID using the supplied …\nCreates a <code>Builder</code> from four field values.\nCreates a UUID from four field values.\nCreates a <code>Builder</code> from four field values.\nCreates a UUID from four field values in little-endian …\nConstruct a <code>Timestamp</code> from the number of 100 nanosecond …\nCreates a <code>Builder</code> for a version 1 UUID using the supplied …\nCreates a <code>Builder</code> for a version 3 UUID using the supplied …\nCreates a <code>Builder</code> for a version 4 UUID using the supplied …\nCreates a <code>Builder</code> for a version 5 UUID using the supplied …\nCreates a <code>Builder</code> using the supplied bytes.\nCreates a UUID using the supplied bytes.\nCreates a <code>Builder</code> using the supplied bytes in little …\nCreates a UUID using the supplied bytes in little endian …\nCreates a <code>Builder</code> for a version 6 UUID using the supplied …\nCreates a <code>Builder</code> from a 128bit value.\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nConstruct a <code>Timestamp</code> from a Unix timestamp and up to a …\nConstruct a <code>Timestamp</code> from a Unix timestamp and up to a …\nCreates a <code>Builder</code> for a version 7 UUID using the supplied …\nGet the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nGet the underlying <code>Uuid</code> value.\nIf the UUID is the correct version (v1, or v6) this will …\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nGet a <code>Hyphenated</code> formatter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the underlying byte value of the …\nConvert the builder into a <code>Uuid</code>.\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\nThe ‘max UUID’ (all ones).\nCreates a non-nil UUID if the value is non-nil.\nCreates a non-nil without checking whether the value is …\nCreates a random UUID.\nCreates a <code>Builder</code> with an initial <code>Uuid::nil</code>.\nThe ‘nil UUID’ (all zeros).\nGet a timestamp representing the current system time and …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nAdapters for alternative <code>serde</code> formats.\nSpecifies the variant of the UUID.\nSpecifies the version number of the UUID.\nGet a <code>Simple</code> formatter.\nGenerating UUIDs from timestamps.\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nGet the value of the timestamp as the number of 100 …\nReturns a 128bit little-endian value containing the value.\nGet the value of the timestamp as a Unix timestamp, as …\nAttempts to convert a <code>Uuid</code> into a <code>NonNilUuid</code>.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nGet a <code>Urn</code> formatter.\nThe number of usable bits from the least significant bit …\nParse <code>Uuid</code>s from string literals at compile time.\nSpecifies the variant of the UUID.\nSpecifies the version number of the UUID.\nFormat a <code>Uuid</code> as a braced hyphenated string, like …\nFormat a <code>Uuid</code> as a hyphenated string, like …\nThe length of a hyphenated <code>Uuid</code> string.\nThe length of a simple <code>Uuid</code> string.\nThe length of a URN <code>Uuid</code> string.\nThe length of a braced <code>Uuid</code> string.\nFormat a <code>Uuid</code> as a simple string, like …\nFormat a <code>Uuid</code> as a URN string, like …\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nWrites the <code>Uuid</code> as a lower-case hyphenated string to <code>buffer</code>…\nWrites the <code>Uuid</code> as a lower-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as a lower-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as a lower-case hyphenated string …\nWrites the <code>Uuid</code> as an upper-case hyphenated string to …\nWrites the <code>Uuid</code> as an upper-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as an upper-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as an upper-case hyphenated string …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Hyphenated</code> from a <code>Uuid</code>.\nCreates a <code>Simple</code> from a <code>Uuid</code>.\nCreates a <code>Urn</code> from a <code>Uuid</code>.\nCreates a <code>Braced</code> from a <code>Uuid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Hyphenated</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Simple</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Urn</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Braced</code>, returning the underlying <code>Uuid</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nSerialize a <code>Uuid</code> as a <code>[u8; 16]</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nDeserialize a braced Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nDeserialize a <code>[u8; 16]</code> as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>[u8; 16]</code>\nDeserialize a simple Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nDeserialize a urn Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nA counter that can be used by versions 1 and 6 UUIDs to …\nThe type of sequence returned by this counter.\nA timestamp that can be encoded into a UUID.\nThe number of 100 nanosecond ticks between the RFC 9562 …\nDefault implementations for the <code>ClockSequence</code> trait.\nGet the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nThe number of usable bits from the least significant bit …\nAn empty counter that will always return the value <code>0</code>.\nA wrapper for a context that uses thread-local storage.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrap a thread-local container with a context.\nThe tensor did not have the right shape for an image (e.g. …\nBT.601 (aka. SDTV, aka. Rec.601)\nBT.709 (aka. HDTV, aka. Rec.709)\nThe <code>ChannelDatatype</code> for this type.\nHappens if you try to cast <code>NV12</code> or <code>YUY2</code> to a depth image …\nA normal grayscale or color image (<code>archetypes::Image</code>).\nA depth map (<code>archetypes::DepthImage</code>).\ne.g. failed to decode a JPEG file.\nTypes that implement this can be used as image channel …\nError returned when trying to interpret a tensor as an …\nErrors when converting images from the <code>image</code> crate to an …\nFailure to convert the loaded image to a <code>archetypes::Image</code>.\nThe kind of image data, either color, segmentation, or …\nErrors when loading image files.\ne.g. failed to find a file on disk.\nA segmentation image (<code>archetypes::SegmentationImage</code>).\nCould not convert source to <code>TensorData</code>.\ne.g. failed to decode tiff image.\nFailed to read the MIME type from inspecting the image …\nUnknown color type from the image crate.\nThe encountered MIME type is not supported for decoding …\nYuv matrix coefficients that determine how a YUV image is …\nConverts it to what is useful for the image API.\nDecode a TIFF byte slice into a <code>Blob</code> and an <code>ImageFormat</code>.\nReinterpret POD (plain-old-data) types to <code>u8</code>.\nReturns the indices of an appropriate set of dimensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetermine the kind of image from an image archetype name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns sRGB from YUV color.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nFind an <code>ArchetypeReflection</code> based on its short name.\nReturns the component descriptor for this field.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nIf deprecated, this explains since when, and what to use …\nIf deprecated, this explains since when, and what to use …\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates reflection about all known components.\nComputes a placeholder for a given arrow datatype.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a required component?\nThe name of the field (i.e. same as …\nIterate over this archetype’s required fields.\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nChecks that the given Arrow array can be deserialized into …\nThe views that this archetype can be added to.\n16-bit floating point number.\n16-bit floating point number.\n32-bit floating point number.\n32-bit floating point number.\n64-bit floating point number.\n64-bit floating point number.\nSigned 16 bit integer.\nSigned 16 bit integer.\nSigned 32 bit integer.\nSigned 32 bit integer.\nSigned 64 bit integer.\nSigned 64 bit integer.\nSigned 8 bit integer.\nSigned 8 bit integer.\nErrors when trying to cast <code>TensorData</code> to an <code>ndarray</code>\nThe data types supported by a <code>crate::datatypes::TensorData</code>.\nThe data that can be stored in a …\nErrors when loading <code>TensorData</code> from the <code>image</code> crate.\nUnsigned 16 bit integer.\nUnsigned 16 bit integer.\nUnsigned 32 bit integer.\nUnsigned 32 bit integer.\nUnsigned 64 bit integer.\nUnsigned 64 bit integer.\nUnsigned 8 bit integer.\nUnsigned 8 bit integer.\nGet the value as a 64-bit floating point number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this datatype a floating point number?\nIs this datatype an integer?\nWhat is the maximum finite value representable by this …\nWhat is the minimum finite value representable by this …\nNumber of bytes used by the type\nConvert the value to a <code>u16</code>, but only if it can be …\nLarge struct used for benchmarking.\nBuilds len instances of <code>LargeStruct</code>\nThe total number of components in the archetype: 22 …\nThe total number of components in the archetype: 19 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nClear all the fields of a <code>AffixFuzzer1</code>.\nClear all the fields of a <code>AffixFuzzer2</code>.\nClear all the fields of a <code>AffixFuzzer3</code>.\nClear all the fields of a <code>AffixFuzzer4</code>.\nPartitions the component data into multiple sub-batches.\nPartitions the component data into multiple sub-batches.\nPartitions the component data into multiple sub-batches.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nHelper to partition the component data into unit-length …\nHelper to partition the component data into unit-length …\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1001</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1002</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1003</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1004</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1005</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1006</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1007</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1008</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1009</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1010</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1011</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1012</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1013</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1014</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1015</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1016</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1017</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1018</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1019</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1020</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1021</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1022</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1101</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1102</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1103</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1104</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1105</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1106</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1107</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1108</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1109</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1110</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1111</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1112</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1113</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1114</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1115</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1116</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1117</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1118</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1122</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2001</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2002</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2003</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2004</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2005</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2006</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2007</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2008</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2009</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2010</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2011</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2012</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2013</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2014</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2015</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2016</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2017</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2018</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2101</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2102</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2103</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2104</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2105</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2106</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2107</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2108</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2109</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2110</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2111</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2112</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2113</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2114</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2115</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2116</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2117</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2118</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AffixFuzzer1</code>.\nCreate a new <code>AffixFuzzer2</code>.\nCreate a new <code>AffixFuzzer3</code>.\nCreate a new <code>AffixFuzzer4</code>.\nUpdate only some specific fields of a <code>AffixFuzzer1</code>.\nUpdate only some specific fields of a <code>AffixFuzzer2</code>.\nUpdate only some specific fields of a <code>AffixFuzzer3</code>.\nUpdate only some specific fields of a <code>AffixFuzzer4</code>.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBaby’s got it.\nFeeling blue.\n<strong>Datatype</strong>: A test of the enum type.\nIt’s the only way to go.\nIt’s what’s remaining.\nOne.\nCorrect.\nThe answer to life, the universe, and everything.\nThree.\nTwo.\nGreat film.\n<strong>Datatype</strong>: A test of an enumate with specified values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe first value.\nThe second value.\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nLeft or right handedness. Used to describe a coordinate …\nLeft-handed coordinate system.\n-X\n-Y\n-Z\n+X\n+Y\n+Z\nRight-handed coordinate system.\nPositive (<code>+</code>) or Negative (<code>-</code>).\nOne of: <code>+X</code>, <code>-X</code>, <code>+Y</code>, <code>-Y</code>, <code>+Z</code>, <code>-Z</code>, i.e. one of the six …\nThe six cardinal directions for 3D view-space and …\nConvert to a unit-length 3D vector.\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an upper case letter to one of the six cardinal …\nConvert a dimension index to an axis.\nCreate a <code>Handedness</code> from a boolean.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLong description of the direction, e.g. “Up”, “Down…\nRepresent this direction as the first letter of the …\nPositive or negative.\nIf true, we hide the native window decoration (the top bar …\nA table mapping all combination of <code>Hue</code> and <code>Scale</code> to a …\nA token representing a color in the global color table.\nExtension trait for <code>egui::Context</code>.\nA single row in the controls table.\nThe look and feel of the UI.\nIf true, we fill the entire window, except for the …\nA help popup where you can show markdown text and controls …\nA hue for a <code>ColorToken</code>.\nHelper to show text with icons in a row. Usually created …\nNewtype over <code>egui::Key</code> which provides a <code>Display</code> …\nThe style of a label.\nDisplay a short summary. Used in lists.\nNewtype over <code>egui::Modifiers</code> which provides a <code>Display</code> …\nNewtype over <code>egui::PointerButton</code> which provides a <code>Display</code> …\nHelper to show mouse buttons as text/icons.\nIf true, we show the native window decorations/chrome with …\nRegular style for a label.\nSave the current recording, or all selected recordings\nA color scale for a <code>ColorToken</code>.\nA collapsible section header, with support for optional …\nDisplay everything as wide as available, without height …\nDrag value widget for editing time values for both …\nDisplay as much information as possible in a compact way. …\nAll the commands we support.\nInterface for sending <code>UICommand</code> messages.\nRerun custom extensions to <code>egui::Ui</code>.\nSpecifies the context in which the UI is used and the …\nLabel displaying the placeholder text for a yet unnamed …\nAdd an item to the row.\nApply the Rerun design tokens to the given egui context …\nFor the streams view (time panel)\nDraw a bullet (for text lists).\nSet the button to be shown in the header.\nCenter the content within <code>egui::Ui::max_rect()</code>.\nReplacement for <code>egui::CollapsingHeader</code> that respect our …\nLayout area to allocate for the collapsing triangle.\nGet the <code>Color32</code> corresponding to the provided <code>ColorToken</code>.\nAdd a single control row to the last controls section.\nCreate a new empty control section.\nAdd a controls section.\nShow data while respecting the given UI layout.\nSet the default open state of the section header.\nReturn a reference to the global design tokens structure.\nAdd a docs link, to be shown in the top right corner.\nHelpers for drag and drop support for reordering …\nShow a drag value widget, taking into account the time …\nDraws a shadow into the given rect with the shadow …\nA drop-down menu with a list of options.\nStroke used to indicate that a UI element is a container …\nShows an error label with the entire error text and copies …\nText colored to indicate an error.\nShows a small error label with the given text on hover and …\nAdd e.g. “ (Ctrl+F11)“ as a suffix\nReturn the keyboard shortcut for this command, nicely …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the current full-span scope.\nUse the provided range as full span for the nested content.\nCreate a separator similar to <code>egui::Separator</code> but with the …\nWorkaround for putting a label into a grid at the top left …\nHeight of the top bar\nSet the help markdown tooltip to be shown in the header.\nSet the help text tooltip to be shown in the header.\nSet the help UI closure to be shown in the header.\nHovered UI and spatial primitives should have this outline.\nAdd an icon to the row.\nCreate an <code>IconText</code> with the given items.\nHuman readable unique id\nExtra horizontal space in the top left corner to make room …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo we have a lot of vertical space?\nShould the UI fit on one line?\nAll keyboard shortcuts, with the primary first.\nShow a label while respecting the given UI layout.\nColor of an icon next to a label\nSecond-generation list item.\nConvenience function to create a <code>list_item::ListItem</code>.\nConvenience to create a non-interactive, collapsible …\nConvenience for adding a flat non-interactive …\nPopup similar to <code>egui::popup_below_widget</code> but suitable for …\nConvenience function to create a <code>list_item::list_item_scope</code>…\nLoad design tokens from <code>data/design_tokens_*.json</code>.\nThe color we use to mean “loop all the data”\nThe color we use to mean “loop this selection”\nAdd a markdown section.\nShow some markdown\nReturn the maximum time set for this drag value.\nConditionally collapsing header.\nShows a “+” if the OS is not Mac. Useful if you want …\nShow this command as a menu-button.\nReturn the minimum time set for this drag value.\nHelper to add <code>egui::Modifiers</code> as text with icons. Will …\nShow some close/maximize/minimize buttons for the native …\nCreate a new <code>Self</code>.\nBuild a new color table by calling the provided closure …\nCreate a new help popup.\nCreate a new control row.\nCreate a new, empty <code>IconText</code>.\nColor for notification background\nColor for notification panel background\nPaint a collapsing triangle in the Rerun’s style.\nPaints a time cursor for indicating the time on a time …\nPaint a watermark\nStatic title bar used to separate panels into section.\nStatic title bar used to separate panels into section with …\nAllowed range for value.\nHelper for adding a list-item hyperlink.\nConvenience function to create a …\nThe color for the background of …\nStyle <code>egui::Ui::selectable_value</code>s and friends into a …\nTwo-column grid to be used in selection view.\nSelected UI and spatial primitives should have this …\nShow a sequence drag value widget.\nSet <code>egui::Style::wrap_mode</code> to <code>egui::TextWrapMode::Truncate</code>…\nShows a keyboard shortcut with a modifier and the given …\nDisplay the header.\nShow the command palette, if it is visible.\nAdds a non-interactive, optionally tinted small icon.\nShows a success label with a large border.\nText colored to indicate success.\nBuild an egui table and configure it for the given UI …\nShow a temporal drag value widget.\nAdd text to the row.\nText format used for regular body.\nText format used for labels referring to keys and buttons.\nUsed by the “add view or container” modal.\nHeight of the title row in the blueprint view and …\nBinary toggle switch.\nHeight of the top-most bar.\nShow the help popup. Usually you want to show this in …\nMargin on all sides of views.\nShows a warning label with a large border.\nText colored to indicate a warning.\nContainer item.\nDrop target information, including where to draw the drop …\nContext information about the hovered item.\nLeaf item.\nRoot container item.\nCompute the geometry of the drag cursor and where the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the item being hovered during drag\nY coordinate for drag target indicator\nRange of X coordinates for the drag target indicator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat kind of item is this?\nID of the container just before this item within the …\nDestination container ID\nDestination position within the container\nFull-text, case-insensitive matcher.\nState and UI for the filter widget.\nAccumulates highlight ranges for the various parts of a …\nActivate the filter.\nAdd ranges to a given part index.\nReturn a filter matcher for the current query.\nGiven a list of highlight sections defined by start/end …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the filter currently active?\nIs the filter currently active?\nMatch a path and return the highlight ranges if any.\nMerge another <code>Self</code>.\nAdd a single range to a given part index.\nReturn the filter if any.\nRemove the ranges for the given part and (if any) return …\nDisplay the filter widget as a search field.\nDisplay the filter widget as a section title.\nReturn the current session ID of the filter widget.\n<code>&gt;</code>\nUsed for HTTP URLs that lead out of the app.\nLink within the viewer\nShortcut icons\nHuman readable unique id\nThe content needs at least this width for display, but …\nSimple <code>ListItemContent</code> to easily display a button in a …\nContext provided to <code>ListItemContent</code> implementations\n<code>ListItemContent</code> that mostly delegates to a closure.\n<code>ListItemContent</code> that displays the content rect.\nThe content needs exactly this width for display.\nAn <code>super::ItemButton</code> that acts as an action button.\nA button that can be used by a list item.\nAn <code>super::ItemButton</code> that acts as a popup menu.\n<code>ListItemContent</code> that displays a simple label with optional …\nLayout information prepared by <code>list_item_scope</code> to be used …\nContent-generic list item.\nImplemented after …\n<code>ListItemContent</code> to display property-like, two-column …\nResponses returned by …\nHelper to add an <code>super::ItemActionButton</code> to the right of …\nHelper to add an <code>super::ItemActionButton</code> to the right of …\nHelper to add an enabled/disabled <code>super::ItemActionButton</code> …\nHelper to add an enabled/disabled <code>super::ItemActionButton</code> …\nSet the active state of the item.\nAlways show the buttons.\nBackground area\nResponse from the body, if it was displayed.\nAdd a right-aligned <code>super::ItemButton</code>.\nAdd a right-aligned <code>super::ItemButton</code>.\nThe desired width of the content.\nSets text shown when the button is disabled and hovered.\nSets text shown when the button is disabled and hovered.\nMake the item draggable.\nHighlight the item as the current drop target.\nSets whether the button is enabled.\nSets enable/disable state of the button.\nSets enable/disable state of the button.\nOverride the background color for the item.\nOverride the hovered state even if the item is not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRender this as a header item.\nSet the item’s vertical offset to …\nSets the hover text of the button.\nSets text shown when the button hovered.\nSets text shown when the button hovered.\nCan the user click and interact with it?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender text in italic.\nResponse from the item itself.\nStyle the label for an unnamed items.\nLayout information to use for rendering.\nThe current list item.\nCreate a scope in which <code>[ListItem]</code>s can be created.\nHelper to add a <code>super::ItemMenuButton</code> to the right of the …\nHelper to add a <code>super::ItemMenuButton</code> to the right of the …\nSet the minimum desired for the content.\nSet the minimum desired width for the entire content.\nCreate a content with a custom UI closure.\nCreate a new <code>ListItem</code> with the given label.\nCalled when the button is clicked.\n0.0 if fully closed, 1.0 if fully open, and something …\nArea available for the content to draw in.\nRegister the desired width of the left column.\nControls whether <code>Self</code> calls <code>ListItemContent::ui</code> when the …\nIndicate whether right-aligned space should be reserved …\nList item response.\nSet the selected state of the item.\nDraw the item as part of a flat list.\nDraw the item as a leaf node from a hierarchical list.\nDraw the item as a non-leaf node from a hierarchical list.\nDraw the item with unindented child content.\nDisplay value only for leaf or collapsed items.\nSet the subdued state of the item.\nShould we truncate text if it is too long?\nUI for everything that is after the indent and the …\nDraw the button.\nShow a read-only boolean in the value column.\nShow an editable boolean in the value column.\nShow a read-only color in the value column.\nShow an editable color in the value column.\nProvide a closure to draw the content of the right column.\nShow a static text in the value column.\nShow an editable text in the value column.\nThe colors to use for rendering.\nSet the weak state of the item.\nProvide a closure to display on-hover buttons on the right …\nSet the desired width based on the provided content width. …\nSet the desired width for the entire content.\nSet the item height.\nProvide an <code>Icon</code> to be displayed on the left of the item.\nProvide an <code>Icon</code> to be displayed on the left of the label.\nProvide a custom closure to draw an icon on the left of …\nProvide a custom closure to draw an icon on the left of …\nSet the item’s vertical offset.\nHelper object to handle a <code>ModalWrapper</code> window.\nShow a modal window with Rerun style using <code>egui::Modal</code>.\nSet the default height of the modal window.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigure the content area of the modal for full span …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the minimum height of the modal window.\nSet the minimum width of the modal window.\nCreate a new modal with the given title.\nOpen the model the next time the <code>ModalHandler::ui</code> method …\nPrevent a UI from shrinking if the content size changes.\nEnclose the contents in a scroll area.\nConfigure whether the side margin should be set.\nShow the modal window.\nDraw the modal window, creating/destroying it as required.\nThe “debug” level.\nThe “error” level.\nThe “info” level.\nAn enum representing the available verbosity levels of the …\nThe “trace” level.\nThe “warn” level.\nReturns the string representation of the <code>Level</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through all supported logging levels.\nReturns the most verbose logging level.\nConverts the <code>Level</code> to the equivalent <code>LevelFilter</code>.\nFormats an instance number enclosed in square brackets: …\nEasily build syntax-highlighted text.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLike <code>ChunksWithDescriptor</code> but for a single chunk.\nA helper struct that bundles a list of chunks with a …\nWrapper that contains the results of a latest-at query …\nWrapper that contains the results of a range query with …\nThe iterator type backing <code>HybridResults::iter_as</code>.\nExtension traits to abstract query result handling for all …\nGap between lines and their outline.\nGap between points and their outline.\nClamp the last value in <code>values</code> in order to reach a length …\nIterate as indexed deserialized batches.\nUtility for implementing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUtility for retrieving a single instance of a component.\nUtility for retrieving a single instance of a component.\nUtility for retrieving the first instance of a component.\nUtility for retrieving the first instance of a component.\nReturns component data for the given component or an empty …\nReturns component data for the given component, ignores …\nUtility for retrieving a single instance of a component, …\nUtility for retrieving the first instance of a component, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a zero-copy iterator over all the results for the …\nSee <code>Chunk::iter_component</code>.\nSee <code>Chunk::iter_component_indices</code>.\nSee <code>Chunk::iter_component_timepoints</code>.\nSee <code>Chunk::iter_slices</code>.\nQueries for the given <code>component_names</code> using latest-at …\nProduce an <code>re_renderer::OutlineConfig</code> based on the …\nResolves all annotations and keypoints for the given …\nResolves all annotations for the given entity view.\nProcess <code>Color</code> components using annotations and default …\nQueries for all components of an archetype, taking into …\nQueries for the given components, taking into account:\nQueries for the given <code>component_names</code> using range …\nIterate as indexed, sliced, deserialized component batches.")