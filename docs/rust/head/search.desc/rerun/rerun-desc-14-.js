searchState.loadedDescShard("rerun", 14, "Access the <code>kittest::State</code>.\nCreate a new <code>SnapshotOptions</code> with the default values.\nCreate a new Harness with the given app closure. Use the …\nCreate a new Harness from the given eframe creation …\nCreate a new Harness with the given app closure and a …\nCreate a new Harness with the given ui closure. Use the …\nCreate a new Harness with the given ui closure and a state.\nAccess the <code>egui::FullOutput</code> for the last frame.\nChange the path where the snapshots will be saved. The …\nThe path where the snapshots will be saved. The default is …\nPress a key. This will create a key down event and a key …\nPress a key with modifiers. This will create a key-down …\nRender the <code>crate::Harness</code> and return the resulting image.\nRender the last output to an image.\nSet the <code>TestRenderer</code> to use for rendering.\nRun until\nRun until\nRun a number of steps. Equivalent to calling <code>Harness::step</code> …\nSet the <code>pixels_per_point</code> of the window. Note: If you only …\nSet the size of the window. Note: If you only want to set …\nWe use this to pass the glow / wgpu render state to …\nRender an image using the setup <code>crate::TestRenderer</code> and …\nRender an image using the setup <code>crate::TestRenderer</code> and …\nAccess the state.\nAccess the state mutably.\nRun a frame for each queued event (or a single frame if …\nChange the threshold for the image comparison. The default …\nThe threshold for the image comparison. The default is <code>0.6</code> …\nImage snapshot test.\nImage snapshot test with custom options.\nRun until\nRun multiple frames, sleeping for …\nRender an image using the setup <code>crate::TestRenderer</code> and …\nRender an image using the setup <code>crate::TestRenderer</code> and …\nPanics if there are any errors, displaying each.\nEnable wgpu rendering with a default setup suitable for …\nEnable wgpu rendering with the given setup.\nSet the maximum number of steps to run when calling …\nSet the <code>pixels_per_point</code> of the window.\nSet the size of the window.\nSet the time delta for a single <code>Harness::step</code>.\nShould we wait for pending images?\nActual size\nCount of pixels that were different\nPath where the diff image was saved\nThe error that occurred\nThe error that occurred\nThe error that occurred\nExpected size\nName of the test\nName of the test\nPath where the snapshot was expected to be\nPath where a file was expected to be written\nAn <code>accesskit::ActionRequest</code> event. When using an …\n<code>\\</code>\n`, also known as “backquote” or “grave”\nA filter for nodes. The filters are combined with a …\n<code>:</code>\n<code>,</code>\nThe state of an element (e.g. Button), either pressed or …\n<code>=</code>\nKittest event sent to the GUI application.\nThe keys (currently these match egui’s keys).\n<code>-</code>\nA node in the accessibility tree. This should correspond …\n<code>0</code> (from main row or numpad)\n<code>1</code> (from main row or numpad)\n<code>2</code> (from main row or numpad)\n<code>3</code> (from main row or numpad)\n<code>4</code> (from main row or numpad)\n<code>5</code> (from main row or numpad)\n<code>6</code> (from main row or numpad)\n<code>7</code> (from main row or numpad)\n<code>8</code> (from main row or numpad)\n<code>9</code> (from main row or numpad)\n<code>.</code>\n<code>|</code>, a vertical bar\n<code>+</code>\nProvides convenience methods for querying nodes in the …\n<code>?</code>\n<code>&#39;</code>\n<code>;</code>\nA simulated event, e.g. clicks or typing.\nA Simulated Event. These should map to the event type of …\n<code>/</code>\nThe kittest state\nCreate an empty filter. Convenience function for <code>By::new</code>.\nReturns an iterator with first the Pressed state and then …\nClick the node via accesskit. This will trigger a …\nRequest focus for the node via accesskit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a single node in the tree where the node matches the …\nGet all nodes in the tree where the node matches the given …\nGet all nodes in the tree where the node matches the given …\nGet all nodes in the tree where the node label exactly …\nGet all nodes in the tree where the node label contains …\nGet all nodes in the tree where the node role matches the …\nGet all nodes in the tree where the node role and label …\nGet all nodes in the tree where the node value exactly …\nGet a single node in the tree where the node matches the …\nGet a single node in the tree where the node label exactly …\nGet a single node in the tree where the node label …\nGet a single node in the tree where the node role matches …\nGet a single node in the tree where the node role and …\nGet a single node in the tree where the node value exactly …\nHover the cursor at the node center\nIf a node is labelled by another node, should the label …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPress the given keys in combination\nPress the given key\nPress and release the given key\nRelease the given key\nFilter by the label of the node with an exact match.\nFilter by the label of the node with a substring match.\nCreate an empty filter.\nCreate a new State from a <code>TreeUpdate</code>\nReturn the root node\nGet the parent of the node\nFilter by a custom predicate.\nPress the given keys For e.g. <code>Key::Control</code> + <code>Key::A</code> this …\nQuery a single node in the tree where the node matches the …\nQuery all nodes in the tree where the node matches the …\nQuery all nodes in the tree where the node matches the …\nQuery all nodes in the tree where the node label exactly …\nQuery all nodes in the tree where the node label contains …\nQuery all nodes in the tree where the node role matches …\nQuery all nodes in the tree where the node role and label …\nQuery all nodes in the tree where the node value exactly …\nQuery a single node in the tree where the node matches the …\nQuery a single node in the tree where the node label …\nQuery a single node in the tree where the node label …\nQuery a single node in the tree where the node role …\nQuery a single node in the tree where the node role and …\nQuery a single node in the tree where the node value …\nShould we search recursively? Default is true.\nFilter by the role of the node.\nGet the root node\nSimulate a click event at the node center\nTake all queued events. (These should then be passed to …\nFocus the node and type the given text\nUpdate the state with a new <code>TreeUpdate</code> (this should be …\nFilter by the value of the node with an exact match.\nUtility to render snapshots from a <code>crate::Harness</code> using …\nDefault wgpu setup used for the wgpu renderer.\nReturns the argument unchanged.\nCreate a new <code>WgpuTestRenderer</code> from an existing <code>RenderState</code>.\nCreate a new <code>WgpuTestRenderer</code> with the given setup.\nCalls <code>U::from(self)</code>.\nCreate a new <code>WgpuTestRenderer</code> with the default setup.\nRender the <code>crate::Harness</code> and return the resulting image.\nAsynchronous file utilities.\nTraits, helpers, and type definitions for asynchronous I/O …\nWaits on multiple concurrent branches, returning when <strong>all</strong> …\nMarks async function to be executed by the selected …\nTCP/UDP/Unix bindings for <code>tokio</code>.\nPins a value on the stack.\nThe Tokio runtime.\nWaits on multiple concurrent branches, returning when the …\nAsynchronous signal handling for Tokio.\nSpawns a new asynchronous task, returning a <code>JoinHandle</code> for …\nDue to the <code>Stream</code> trait’s inclusion in <code>std</code> landing later …\nSynchronization primitives for use in asynchronous …\nAsynchronous green-threads.\nDeclares a new task-local key of type <code>tokio::task::LocalKey</code>…\nMarks async function to be executed by runtime, suitable …\nUtilities for tracking time.\nWaits on multiple concurrent branches, returning when <strong>all</strong> …\nA builder for creating directories in various manners.\nEntries returned by the <code>ReadDir</code> stream.\nA reference to an open file on the filesystem.\nOptions and flags which can be used to configure how a …\nReads the entries in a directory.\nSets the option for the append mode.\nReturns the canonical, absolute form of a path with all …\nCopies the contents of one file to another. This function …\nOpens a file in write-only mode.\nCreates the specified directory with the configured …\nSets the option for creating a new file.\nCreates a new, empty directory at the provided path.\nRecursively creates a directory and all of its parent …\nOpens a file in read-write mode.\nSets the option to always create a new file.\nPasses custom flags to the <code>flags</code> argument of <code>open</code>.\nReturns the bare file name of this directory entry without …\nReturns the file type for the file that this entry points …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>std::fs::File</code> to a <code>tokio::fs::File</code>.\nCreates a new hard link on the filesystem.\nReturns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestructures <code>File</code> into a <code>std::fs::File</code>. This function is …\nGiven a path, queries the file system to get information …\nQueries metadata about the underlying file.\nReturns the metadata for the file that this entry points …\nSets the mode to create new directories with.\nSets the mode bits that a new file will be created with.\nCreates a new set of options with default mode/security …\nCreates a blank new set of options ready for configuration.\nReturns the next entry in the directory stream.\nAttempts to open a file in read-only mode.\nOpens a file at <code>path</code> with the options specified by <code>self</code>.\nReturns a new <code>OpenOptions</code> object.\nReturns the full path to the file that this entry …\nPolls for the next directory entry in the stream.\nReads the entire contents of a file into a bytes vector.\nSets the option for read access.\nReturns a stream over the entries within a directory.\nReads a symbolic link, returning the file that the link …\nCreates a future which will open a file for reading and …\nIndicates whether to create directories recursively …\nRemoves an existing, empty directory.\nRemoves a directory at this path, after removing all its …\nRemoves a file from the filesystem.\nRenames a file or directory to a new name, replacing the …\nTruncates or extends the underlying file, updating the …\nSet the maximum buffer size for the underlying <code>AsyncRead</code> / …\nChanges the permissions found on a file or a directory.\nChanges the permissions on the underlying file.\nCreates a new symbolic link on the filesystem.\nQueries the file system metadata for a path.\nAttempts to sync all OS-internal metadata to disk.\nThis function is similar to <code>sync_all</code>, except that it may …\nSets the option for truncating a previous file.\nCreates a new <code>File</code> instance that shares the same …\nReturns <code>Ok(true)</code> if the path points at an existing entity.\nTries to immediately destructure <code>File</code> into a <code>std::fs::File</code>.\nCreates a future that will open a file for writing and …\nSets the option for write access.\nReturns a <code>Ready</code> representing readiness for all operations.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nProgram argument list too long.\nReads bytes asynchronously.\nAn extension trait which adds utility methods to …\nReads bytes from a source.\nReads bytes from a source.\nSeek bytes asynchronously.\nAn extension trait that adds utility methods to <code>AsyncSeek</code> …\nWrites bytes asynchronously.\nWrites bytes to a sink.\nThe operation failed because a pipe was closed.\nThe <code>BufReader</code> struct adds buffering to any reader.\nWraps a type that is <code>AsyncWrite</code> and <code>AsyncRead</code>, and buffers …\nWraps a writer and buffers its output.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nCross-device or cross-filesystem (hard) link or rename.\nSets the offset to the current position plus the specified …\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nA bidirectional pipe to read and write bytes in memory.\nReturns the empty <code>Ready</code> set.\nInterest in error events.\nReturns a <code>Ready</code> representing error readiness.\n<code>Empty</code> ignores any data written via <code>AsyncWrite</code>, and will …\nSets the offset to the size of this object plus the …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nThe remote host is not reachable.\nThe operation was partially successful and needs to be …\nReadiness event interest.\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nThe filesystem object is, unexpectedly, a directory.\nJoins two values implementing <code>AsyncRead</code> and <code>AsyncWrite</code> …\nReads lines from an <code>AsyncBufRead</code>.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nContains the success value\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nReturns a <code>Interest</code> set representing priority completion …\nReturns a <code>Ready</code> representing priority readiness.\nThe operation lacked the necessary privileges to complete.\nFilesystem quota or some other kind of quota was exceeded.\nInterest in all readable events.\nReturns a <code>Ready</code> representing readable readiness.\nReturns a <code>Ready</code> representing read closed readiness.\nA wrapper around a byte buffer that is incrementally …\nThe readable half of a value returned from <code>split</code>.\nThe filesystem or storage medium is read-only, but a write …\nDescribes the readiness state of an I/O resources.\nAn async reader which yields one byte over and over and …\nResource is busy.\nA specialized <code>Result</code> type for I/O operations.\nEnumeration of possible methods to seek within an I/O …\nA unidirectional pipe to read and write bytes in memory.\nAn async writer which will move data into the void.\nSplitter for the <code>split</code> method.\nStale network file handle.\nSets the offset to the provided number of bytes.\nA handle to the standard error stream of a process.\nA handle to the standard input stream of a process.\nA handle to the standard output stream of a process.\nThe underlying storage (typically, a filesystem) is full.\nStream for the <code>take</code> method.\nThe I/O operation’s timeout expired, causing it to be …\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nInterest in all writable events.\nReturns a <code>Ready</code> representing writable readiness.\nReturns a <code>Ready</code> representing write closed readiness.\nThe operation needs to block to complete, but the blocking …\nThe writable half of a value returned from <code>split</code>.\nAn error returned when an operation could not be completed …\nAdd together two <code>Interest</code> values.\nAdvances the size of the filled region of the buffer.\nAsserts that the first <code>n</code> unfilled bytes of the buffer are …\nReturns a reference to the internally buffered data.\nReturns a reference to the internally buffered data.\nReturns the total capacity of the buffer.\nCreates a new <code>AsyncRead</code> instance that chains this stream …\nClears the buffer, resetting the filled region to empty.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nTells this buffer that <code>amt</code> bytes have been consumed from …\nAsynchronously copies the entire contents of a reader into …\nCopies data in both directions between <code>a</code> and <code>b</code>.\nCopies data in both directions between <code>a</code> and <code>b</code> using …\nAsynchronously copies the entire contents of a reader into …\nAttempts to downcast the custom boxed error to <code>E</code>.\nCreate a new pair of <code>DuplexStream</code>s that act like a pair of …\nCreates a value that is always at EOF for reads, and …\nReturns the contents of the internal buffer, filling it …\nReturns a shared reference to the filled portion of the …\nReturns a mutable reference to the filled portion of the …\nFlushes this output stream, ensuring that all …\nShows a human-readable description of the <code>ErrorKind</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>alloc::ffi::NulError</code> into a <code>Error</code>.\nConvert a <code>serde_json::Error</code> into an <code>io::Error</code>.\nConverts an <code>ErrorKind</code> into an <code>Error</code>.\nConverts Calloop’s error type into a <code>std::io::Error</code>.\nConverts <code>TryReserveError</code> to an error with …\nConvert the <code>Error</code> to an <code>io::Error</code>, preserving the original …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of an <code>Error</code> from a particular OS …\nReturns a mutable reference to the inner error wrapped by …\nGets a mutable reference to the underlying reader.\nObtains a mutable reference to the underlying reader.\nGets a mutable reference to the underlying writer.\nGets a mutable reference to the underlying I/O object.\nGets a mutable reference to the underlying reader.\nGets a pinned mutable reference to the underlying reader.\nGets a pinned mutable reference to the underlying writer.\nGets a pinned mutable reference to the underlying I/O …\nGets a pinned mutable reference to the underlying reader.\nReturns a reference to the inner error wrapped by this …\nGets a reference to the underlying reader.\nObtains a reference to the underlying reader.\nGets a reference to the underlying writer.\nGets a reference to the underlying I/O object.\nGets a reference to the underlying reader.\nReturns a mutable reference to the unfilled part of the …\nReturns a mutable reference to the first <code>n</code> bytes of the …\nReturns a shared reference to the initialized portion of …\nReturns a mutable reference to the initialized portion of …\nReturns a mutable reference to the entire buffer, without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplits this <code>Join</code> back into its <code>AsyncRead</code> and <code>AsyncWrite</code> …\nConsumes the <code>Error</code>, returning its inner error (if any).\nConsumes the <code>Take</code>, returning the wrapped reader.\nUnwraps this <code>Lines&lt;R&gt;</code>, returning the underlying reader.\nConsumes this <code>BufWriter</code>, returning the underlying writer.\nConsumes this <code>BufStream</code>, returning the underlying I/O …\nConsumes this <code>BufReader</code>, returning the underlying reader.\nReturns true if <code>Ready</code> is the empty set.\nReturns true if the value includes error interest.\nReturns <code>true</code> if the value includes error <code>readiness</code>.\nChecks if this <code>ReadHalf</code> and some <code>WriteHalf</code> were split from …\nChecks if this <code>WriteHalf</code> and some <code>ReadHalf</code> were split from …\nReturns true if the value includes priority interest.\nReturns <code>true</code> if the value includes priority <code>readiness</code>.\nReturns <code>true</code> if the value includes read-closed <code>readiness</code>.\nReturns true if the value includes readable interest.\nReturns <code>true</code> if the value includes <code>readable</code>.\nReturns true if the value includes writable interest.\nReturns <code>true</code> if the value includes writable <code>readiness</code>.\nReturns <code>true</code> if the value includes write-closed <code>readiness</code>.\nDetermines if this writer has an efficient …\nJoin two values implementing <code>AsyncRead</code> and <code>AsyncWrite</code> into …\nReturns the corresponding <code>ErrorKind</code> for this error.\nReturns an error representing the last OS error which …\nReturns the remaining number of bytes that can be read …\nReturns a stream over the lines of this reader. This …\nCreates a new <code>ReadBuf</code> from a fully initialized buffer.\nCreates a new I/O error from a known kind of error as well …\nCreates a new <code>BufWriter</code> with a default buffer capacity. …\nWraps a type in both <code>BufWriter</code> and <code>BufReader</code>.\nCreates a new <code>BufReader</code> with a default buffer capacity. …\nCreates unidirectional buffer that acts like in memory …\nReturns the next line in the stream.\nReturns the next segment in the stream.\nCreates a new I/O error from an arbitrary error payload.\nWaits for a seek operation to complete.\nAttempts to return the contents of the internal buffer, …\nAttempts to flush the object, ensuring that any buffered …\nPolls for the next line in the stream.\nPolls for the next segment in the stream.\nAttempts to read from the <code>AsyncRead</code> into <code>buf</code>.\nInitiates or attempts to shut down this writer, returning …\nAttempt to write bytes from <code>buf</code> into the object.\nLike <code>poll_write</code>, except that it writes from a slice of …\nAppends data to the buffer, advancing the written position …\nReturns the OS error that this error represents (if any).\nPulls some bytes from this source into the specified …\nPulls some bytes from this source into the specified …\nReads the exact number of bytes required to fill <code>buf</code>.\nReads an 32-bit floating point type in big-endian order …\nReads an 32-bit floating point type in little-endian order …\nReads an 64-bit floating point type in big-endian order …\nReads an 64-bit floating point type in little-endian order …\nReads an signed 128-bit integer in big-endian order from …\nReads an signed 128-bit integer in little-endian order …\nReads a signed 16-bit integer in big-endian order from the …\nReads a signed 16-bit integer in little-endian order from …\nReads a signed 32-bit integer in big-endian order from the …\nReads a signed 32-bit integer in little-endian order from …\nReads an signed 64-bit integer in big-endian order from the\nReads an signed 64-bit integer in little-endian order from …\nReads a signed 8 bit integer from the underlying reader.\nReads all bytes until a newline (the 0xA byte) is reached, …\nReads all bytes until EOF in this source, placing them …\nReads all bytes until EOF in this source, appending them …\nReads an unsigned 128-bit integer in big-endian order from …\nReads an unsigned 128-bit integer in little-endian order …\nReads an unsigned 16-bit integer in big-endian order from …\nReads an unsigned 16-bit integer in little-endian order …\nReads an unsigned 32-bit integer in big-endian order from …\nReads an unsigned 32-bit integer in little-endian order …\nReads an unsigned 64-bit integer in big-endian order from …\nReads an unsigned 64-bit integer in little-endian order …\nReads an unsigned 8 bit integer from the underlying reader.\nReads all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF …\nReturns a reference to the inner reader.\nReturns a mutable reference to the inner reader.\nReturns a pinned mutable reference to the inner reader.\nReturns the number of bytes at the end of the slice that …\nRemove <code>Interest</code> from <code>self</code>.\nCreates an instance of an async reader that infinitely …\nCreates a future which will rewind to the beginning of the …\nCreates a future which will seek an IO object, and then …\nSets the size of the filled region of the buffer.\nSets the number of bytes that can be read before this …\nShuts down the output stream, ensuring that the value can …\nCreates unidirectional buffer that acts like in memory …\nCreates an instance of an async writer which will …\nSplits a single value implementing <code>AsyncRead + AsyncWrite</code> …\nReturns a stream of the contents of this reader split on …\nAttempts to seek to an offset, in bytes, in a stream.\nConstructs a new handle to the standard error of the …\nConstructs a new handle to the standard input of the …\nConstructs a new handle to the standard output of the …\nCreates a future which will return the current seek …\nReturns a new <code>ReadBuf</code> comprised of the unfilled section up …\nCreates an adaptor which reads at most <code>limit</code> bytes from it.\nReturns a mutable reference to the unfilled part of the …\nCreates a new <code>ReadBuf</code> from a buffer that may be …\nAsynchronous IO structures specific to Unix-like operating …\nReunites with a previously split <code>WriteHalf</code>.\nCreates a new <code>BufWriter</code> with the specified buffer capacity.\nCreates a <code>BufStream</code> with the specified <code>BufReader</code> capacity …\nCreates a new <code>BufReader</code> with the specified buffer capacity.\nWrites a buffer into this writer, returning how many bytes …\nAttempts to write an entire buffer into this writer.\nAttempts to write an entire buffer into this writer.\nWrites a buffer into this writer, advancing the buffer’s …\nWrites an 32-bit floating point type in big-endian order …\nWrites an 32-bit floating point type in little-endian …\nWrites an 64-bit floating point type in big-endian order …\nWrites an 64-bit floating point type in little-endian …\nWrites an signed 128-bit integer in big-endian order to the\nWrites an signed 128-bit integer in little-endian order to …\nWrites a signed 16-bit integer in big-endian order to the …\nWrites a signed 16-bit integer in little-endian order to …\nWrites a signed 32-bit integer in big-endian order to the …\nWrites a signed 32-bit integer in little-endian order to …\nWrites an signed 64-bit integer in big-endian order to the …\nWrites an signed 64-bit integer in little-endian order to …\nWrites a signed 8-bit integer to the underlying writer.\nWrites an unsigned 128-bit integer in big-endian order to …\nWrites an unsigned 128-bit integer in little-endian order …\nWrites an unsigned 16-bit integer in big-endian order to …\nWrites an unsigned 16-bit integer in little-endian order …\nWrites an unsigned 32-bit integer in big-endian order to …\nWrites an unsigned 32-bit integer in little-endian order …\nWrites an unsigned 64-bit integer in big-endian order to …\nWrites an unsigned 64-bit integer in little-endian order …\nWrites an unsigned 8-bit integer to the underlying writer.\nLike <code>write</code>, except that it writes from a slice of buffers.\nReturns a reference to the inner writer.\nReturns a mutable reference to the inner writer.\nReturns a pinned mutable reference to the inner writer.\nAssociates an IO object backed by a Unix file descriptor …\nRepresents an IO-ready event detected on a particular file …\nRepresents an IO-ready event detected on a particular file …\nError returned by <code>try_new</code> or <code>try_with_interest</code>.\nThe error type returned by <code>try_io</code>.\nReads or writes from the file descriptor using a …\nReads or writes from the file descriptor using a …\nIndicates to tokio that the file descriptor is no longer …\nIndicates to tokio that the file descriptor is no longer …\nIndicates to tokio that the file descriptor no longer has …\nIndicates to tokio that the file descriptor no longer has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a shared reference to the backing object of the …\nReturns a shared reference to the backing object of the …\nReturns a mutable reference to the backing object of the …\nReturns a mutable reference to the backing object of this …\nReturns a mutable reference to the inner <code>AsyncFd</code>.\nReturns a shared reference to the backing object of this …\nReturns a shared reference to the inner <code>AsyncFd</code>.\nReturns a shared reference to the inner <code>AsyncFd</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeregisters this file descriptor and returns ownership of …\nReturns the original object passed to <code>try_new</code> or …\nCreates an <code>AsyncFd</code> backed by (and taking ownership of) an …\nPolls for read readiness.\nPolls for read readiness.\nPolls for write readiness.\nPolls for write readiness.\nWaits for the file descriptor to become readable, …\nWaits for the file descriptor to become readable, …\nWaits for any of the requested ready states, returning a …\nGet the <code>Ready</code> value associated with this guard.\nGet the <code>Ready</code> value associated with this guard.\nWaits for any of the requested ready states, returning a …\nThis method should be invoked when you intentionally want …\nThis method should be invoked when you intentionally want …\nTries to read or write from the file descriptor using a …\nPerforms the provided IO operation.\nPerforms the provided IO operation.\nTries to read or write from the file descriptor using a …\nCreates an <code>AsyncFd</code> backed by (and taking ownership of) an …\nCreates an <code>AsyncFd</code> backed by (and taking ownership of) an …\nCreates an <code>AsyncFd</code> backed by (and taking ownership of) an …\nWaits for the file descriptor to become writable, …\nWaits for the file descriptor to become writable, …\nA TCP socket server, listening for connections.\nA TCP socket that has not yet been converted to a <code>TcpStream</code>…\nA TCP stream between a local and a remote socket.\nConverts or resolves without blocking to one or more …\nA UDP socket.\nAn I/O object representing a Unix datagram socket.\nA Unix socket which can accept connections from other Unix …\nA Unix socket that has not yet been converted to a …\nA structure representing a connected Unix socket.\nAccepts a new incoming connection from this listener.\nAccepts a new incoming connection to this listener.\nReads or writes from the socket using a user-provided IO …\nReads or writes from the socket using a user-provided IO …\nReads or writes from the socket using a user-provided IO …\nReads or writes from the socket using a user-provided IO …\nCreates a new <code>TcpListener</code>, which will be bound to the …\nBinds the socket to the given address.\nThis function will create a new UDP socket and attempt to …\nCreates a new <code>UnixDatagram</code> bound to the specified path.\nCreates a new <code>UnixListener</code> bound to the specified path.\nBinds the socket to the given address.\nSets the value for the <code>SO_BINDTODEVICE</code> option on this …\nSets the value for the <code>SO_BINDTODEVICE</code> option on this …\nGets the value of the <code>SO_BROADCAST</code> option for this socket.\nEstablishes a TCP connection with a peer at the specified …\nOpens a TCP connection to a remote host.\nConnects the UDP socket setting the default destination …\nConnects the socket to the specified address.\nEstablishes a Unix connection with a peer at the specified …\nConnects to the socket named by <code>path</code>.\nConverts the socket into a <code>UnixDatagram</code>.\nGets the value for the <code>SO_BINDTODEVICE</code> option on this …\nGets the value for the <code>SO_BINDTODEVICE</code> option on this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>RawFd</code> to a <code>TcpSocket</code>.\nCreates new <code>TcpListener</code> from a <code>std::net::TcpListener</code>.\nCreates new <code>TcpStream</code> from a <code>std::net::TcpStream</code>.\nCreates new <code>UdpSocket</code> from a previously bound …\nCreates new <code>UnixDatagram</code> from a …\nCreates new <code>UnixListener</code> from a …\nCreates new <code>UnixStream</code> from a …\nConverts a <code>std::net::TcpStream</code> into a <code>TcpSocket</code>. The …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplits a <code>TcpStream</code> into a read half and a write half, …\nSplits a <code>UnixStream</code> into a read half and a write half, …\nTurns a <code>tokio::net::TcpListener</code> into a …\nTurns a <code>tokio::net::TcpStream</code> into a <code>std::net::TcpStream</code>.\nTurns a <code>tokio::net::UdpSocket</code> into a <code>std::net::UdpSocket</code>.\nTurns a <code>tokio::net::UnixDatagram</code> into a …\nTurns a <code>tokio::net::UnixListener</code> into a …\nTurns a <code>tokio::net::UnixStream</code> into a …\nExecutes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.\nGets the value of the <code>SO_KEEPALIVE</code> option on this socket.\nExecutes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.\nReads the linger duration for this socket by getting the …\nReads the linger duration for this socket by getting the …\nConverts the socket into a <code>TcpListener</code>.\nConverts the socket into a <code>UnixListener</code>.\nReturns the local address that this listener is bound to.\nGets the local address of this socket.\nReturns the local address that this stream is bound to.\nReturns the local address that this socket is bound to.\nReturns the local address that this socket is bound to.\nReturns the local socket address of this listener.\nReturns the socket address of the local half of this …\nPerforms a DNS resolution.\nGets the value of the <code>IP_MULTICAST_LOOP</code> option for this …\nGets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …\nGets the value of the <code>IP_MULTICAST_TTL</code> option for this …\nCreates a new Unix datagram socket.\nCreates a new Unix stream socket.\nCreates a new socket configured for IPv4.\nCreates a new socket configured for IPv6.\nGets the value of the <code>TCP_NODELAY</code> option on this socket.\nGets the value of the <code>TCP_NODELAY</code> option on this socket.\nCreates an unnamed pair of connected sockets.\nCreates an unnamed pair of connected sockets.\nReceives data on the socket from the remote address to …\nReceives a single datagram from the connected address …\nReceives data from the socket, without removing it from …\nRetrieve the sender of the data at the head of the input …\nReturns the remote address that this stream is connected …\nReturns the socket address of the remote peer this socket …\nReturns the address of this socket’s peer.\nReturns the socket address of the remote half of this …\nReturns effective credentials of the process which called …\nPolls to accept a new incoming connection to this listener.\nPolls to accept a new incoming connection to this listener.\nAttempts to receive data on the socket, without removing …\nReceives data from the connected address, without removing …\nReceives data from the socket, without removing it from …\nRetrieve the sender of the data at the head of the input …\nPolls for read readiness.\nPolls for read readiness.\nAttempts to receive a single datagram message on the …\nAttempts to receive a single datagram message on the …\nAttempts to receive a single datagram on the socket.\nAttempts to receive a single datagram on the specified …\nPolls for read/receive readiness.\nPolls for read/receive readiness.\nAttempts to send data on the socket to the remote address …\nAttempts to send data on the socket to the remote address …\nPolls for write/send readiness.\nPolls for write/send readiness.\nAttempts to send data on the socket to a given address.\nAttempts to send data to the specified address.\nPolls for write readiness.\nPolls for write readiness.\nWaits for the socket to become readable.\nWaits for the socket to become readable.\nWaits for the socket to become readable.\nWaits for the socket to become readable.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nReceives a single datagram message on the socket from the …\nReceives data from the socket.\nReceives a single datagram message on the socket from the …\nReceives data from the socket from the address to which it …\nReceives a single datagram message on the socket, …\nReceives from the socket, advances the buffer’s internal …\nReturns the size of the TCP receive buffer for this socket.\nReceives a single datagram message on the socket. On …\nReceives data from the socket.\nRetrieves the value set for <code>SO_REUSEADDR</code> on this socket.\nAllows the socket to bind to an in-use port. Only …\nSends data on the socket to the remote address that the …\nSends data on the socket to the socket’s peer.\nReturns the size of the TCP send buffer for this socket.\nSends data on the socket to the given address. On success, …\nSends data on the socket to the specified address.\nSets the value of the <code>SO_BROADCAST</code> option for this socket.\nSets value for the <code>SO_KEEPALIVE</code> option on this socket.\nSets the linger duration of this socket by setting the …\nSets the linger duration of this socket by setting the …\nSets the value of the <code>IP_MULTICAST_LOOP</code> option for this …\nSets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …\nSets the value of the <code>IP_MULTICAST_TTL</code> option for this …\nSets the value of the <code>TCP_NODELAY</code> option on this socket.\nSets the value of the <code>TCP_NODELAY</code> option on this socket.\nSets the size of the TCP receive buffer on this socket.\nAllows the socket to bind to an in-use address.\nAllows the socket to bind to an in-use port. Only …\nSets the size of the TCP send buffer on this socket.\nSets the value for the <code>IP_TOS</code> option on this socket.\nSets the value for the <code>IP_TOS</code> option on this socket.\nSets the value for the <code>IP_TTL</code> option on this socket.\nSets the value for the <code>IP_TTL</code> option on this socket.\nSets the value for the <code>IP_TTL</code> option on this socket.\nShuts down the read, write, or both halves of this …\nSplits a <code>TcpStream</code> into a read half and a write half, …\nSplits a <code>UnixStream</code> into a read half and a write half, …\nReturns the value of the <code>SO_ERROR</code> option.\nReturns the value of the <code>SO_ERROR</code> option.\nReturns the value of the <code>SO_ERROR</code> option.\nReturns the value of the <code>SO_ERROR</code> option.\nReturns the value of the <code>SO_ERROR</code> option.\nReturns the value of the <code>SO_ERROR</code> option.\nTCP utility types.\nGets the value of the <code>IP_TOS</code> option for this socket.\nGets the value of the <code>IP_TOS</code> option for this socket.\nConsumes stream, returning the tokio I/O object.\nConsumes stream, returning the tokio I/O object.\nConsumes stream, returning the tokio I/O object.\nConsumes stream, returning the Tokio I/O object.\nConsumes stream, returning the tokio I/O object.\nConsumes stream, returning the tokio I/O object.\nTries to read or write from the socket using a …\nTries to read or write from the socket using a …\nTries to read or write from the socket using a …\nTries to read or write from the socket using a …\nTries to receive data on the connected address without …\nTries to receive data on the socket without removing it …\nTry to retrieve the sender of the data at the head of the …\nTries to read data from the stream into the provided …\nTry to read data from the stream into the provided buffer, …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to receive a single datagram message on the socket …\nTries to receive a datagram from the peer without waiting.\nTries to receive data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to receive a single datagram message on the socket. …\nTries to receive data from the socket without waiting.\nTries to receive a single datagram message on the socket. …\nTries to receive data from the socket without waiting.\nTries to send data on the socket to the remote address to …\nTries to send a datagram to the peer without waiting.\nTries to send data on the socket to the given address, but …\nTries to send a datagram to the peer without waiting.\nTry to write a buffer to the stream, returning how many …\nTries to write a buffer to the stream, returning how many …\nTries to write several buffers to the stream, returning …\nTries to write several buffers to the stream, returning …\nGets the value of the <code>IP_TTL</code> option for this socket.\nGets the value of the <code>IP_TTL</code> option for this socket.\nGets the value of the <code>IP_TTL</code> option for this socket.\nCreates a new <code>UnixDatagram</code> which is not bound to any …\nUnix specific network types.\nWaits for the socket to become writable.\nWaits for the socket to become writable.\nWaits for the socket to become writable.\nWaits for the socket to become writable.\nOwned read half of a <code>TcpStream</code>, created by <code>into_split</code>.\nOwned write half of a <code>TcpStream</code>, created by <code>into_split</code>.\nBorrowed read half of a <code>TcpStream</code>, created by <code>split</code>.\nError indicating that two halves were not from the same …\nBorrowed write half of a <code>TcpStream</code>, created by <code>split</code>.\nDestroys the write half, but don’t close the write half …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the local address that this stream is bound to.\nReturns the local address that this stream is bound to.\nReturns the local address that this stream is bound to.\nReturns the local address that this stream is bound to.\nReceives data on the socket from the remote address to …\nReceives data on the socket from the remote address to …\nReturns the remote address that this stream is connected …\nReturns the remote address that this stream is connected …\nReturns the remote address that this stream is connected …\nReturns the remote address that this stream is connected …\nAttempts to receive data on the socket, without removing …\nAttempt to receive data on the socket, without removing …\nWaits for the socket to become readable.\nWaits for the socket to become readable.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nAttempts to put the two halves of a <code>TcpStream</code> back …\nAttempts to put the two halves of a <code>TcpStream</code> back …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to write a buffer to the stream, returning how many …\nTries to write a buffer to the stream, returning how many …\nTries to write several buffers to the stream, returning …\nTries to write several buffers to the stream, returning …\nWaits for the socket to become writable.\nWaits for the socket to become writable.\nOwned read half of a <code>UnixStream</code>, created by <code>into_split</code>.\nOwned write half of a <code>UnixStream</code>, created by <code>into_split</code>.\nBorrowed read half of a <code>UnixStream</code>, created by <code>split</code>.\nError indicating that two halves were not from the same …\nAn address associated with a Tokio Unix socket.\nCredentials of a process.\nBorrowed write half of a <code>UnixStream</code>, created by <code>split</code>.\nReturns the contents of this address if it is a <code>pathname</code> …\nDestroys the write half, but don’t close the write half …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets GID (group ID) of the process.\nA type representing group ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the address is unnamed.\nReturns the socket address of the local half of this …\nReturns the socket address of the local half of this …\nReturns the socket address of the local half of this …\nReturns the socket address of the local half of this …\nReturns the socket address of the remote half of this …\nReturns the socket address of the remote half of this …\nReturns the socket address of the remote half of this …\nReturns the socket address of the remote half of this …\nGets PID (process ID) of the process.\nA type representing process and process group IDs.\nUnix pipe types.\nWaits for the socket to become readable.\nWaits for the socket to become readable.\nWait for any of the requested ready states.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nAttempts to put the two halves of a <code>UnixStream</code> back …\nAttempts to put the two halves of a <code>UnixStream</code> back …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to write a buffer to the stream, returning how many …\nTries to write a buffer to the stream, returning how many …\nTries to write several buffers to the stream, returning …\nTries to write several buffers to the stream, returning …\nGets UID (user ID) of the process.\nA type representing user ID.\nWaits for the socket to become writable.\nWaits for the socket to become writable.\nOptions and flags which can be used to configure how a …\nReading end of a Unix pipe.\nWriting end of a Unix pipe.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Sender</code> from a <code>File</code>.\nCreates a new <code>Receiver</code> from a <code>File</code>.\nCreates a new <code>Sender</code> from a <code>File</code> without checking pipe …\nCreates a new <code>Receiver</code> from a <code>File</code> without checking pipe …\nCreates a new <code>Sender</code> from an <code>OwnedFd</code>.\nCreates a new <code>Receiver</code> from an <code>OwnedFd</code>.\nCreates a new <code>Sender</code> from an <code>OwnedFd</code> without checking pipe …\nCreates a new <code>Receiver</code> from an <code>OwnedFd</code> without checking …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the pipe into an <code>OwnedFd</code> in blocking mode.\nConverts the pipe into an <code>OwnedFd</code> in blocking mode.\nConverts the pipe into an <code>OwnedFd</code> in nonblocking mode.\nConverts the pipe into an <code>OwnedFd</code> in nonblocking mode.\nCreates a blank new set of options ready for configuration.\nCreates a <code>Receiver</code> from a FIFO file with the options …\nCreates a <code>Sender</code> from a FIFO file with the options …\nCreates a new anonymous Unix pipe.\nPolls for read readiness.\nPolls for write readiness.\nSets the option for read-write access.\nWaits for the pipe to become readable.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nTries to read data from the pipe into the provided buffer, …\nTries to read data from the pipe into the provided buffer, …\nTries to read data from the pipe into the provided …\nTries to write a buffer to the pipe, returning how many …\nTries to write several buffers to the pipe, returning how …\nSets the option to skip the check for FIFO file type.\nWaits for the pipe to become writable.\nBuilds Tokio Runtime with custom configuration values.\nThe flavor that executes all tasks on the current thread.\nRuntime context guard.\nHandle to the runtime.\nThe flavor that executes tasks across multiple threads.\nThe Tokio runtime.\nThe flavor of a <code>Runtime</code>.\nHandle to the runtime’s metrics.\nError returned by <code>try_current</code> when no Runtime has been …\nRuns a future to completion on this <code>Handle</code>’s associated …\nRuns a future to completion on the Tokio runtime. This is …\nCreates the configured <code>Runtime</code>.\nReturns a <code>Handle</code> view over the currently running <code>Runtime</code>.\nEnables both I/O and time drivers.\nEnables the I/O driver.\nEnables the time driver.\nEnters the runtime context. This allows you to construct …\nEnters the runtime context.\nSets the number of scheduler ticks after which the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the number of tasks currently scheduled in the …\nSets the number of scheduler ticks after which the …\nReturns a handle to the runtime’s spawner.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the call failed because there is currently …\nReturns true if the call failed because the Tokio context …\nSpecifies the limit for additional threads spawned by the …\nEnables the I/O driver and configures the max number of …\nReturns a view that lets you get information about how the …\nReturns a view that lets you get information about how the …\nCreates a new runtime instance with default configuration …\nReturns a new builder with the current thread scheduler …\nReturns a new builder with the multi thread scheduler …\nReturns the current number of alive tasks in the runtime.\nReturns the number of worker threads used by the runtime.\nExecutes function <code>f</code> just before a thread is parked (goes …\nExecutes function <code>f</code> after each thread is started but …\nExecutes function <code>f</code> before each thread stops.\nExecutes function <code>f</code> just after a thread unparks (starts …\nReturns the flavor of the current <code>Runtime</code>.\nShuts down the runtime, without waiting for any spawned …\nShuts down the runtime, waiting for at most <code>duration</code> for …\nSpawns a future onto the Tokio runtime.\nSpawns a future onto the Tokio runtime.\nRuns the provided function on an executor dedicated to …\nRuns the provided function on an executor dedicated to …\nSets a custom timeout for a thread in the blocking pool.\nSets name of threads spawned by the <code>Runtime</code>’s thread …\nSets a function used to generate the name of threads …\nSets the stack size (in bytes) for worker threads.\nReturns a Handle view over the currently running Runtime\nSets the number of worker threads the <code>Runtime</code> will use.\nCompletes when a “ctrl-c” notification is sent to the …\nUnix-specific types for signal handling.\nAn listener for receiving a particular type of OS signal.\nRepresents the specific kind of signal to listen for.\nRepresents the <code>SIGALRM</code> signal.\nGet the signal’s numeric value.\nRepresents the <code>SIGCHLD</code> signal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAllows for listening to any valid OS signal.\nRepresents the <code>SIGHUP</code> signal.\nRepresents the <code>SIGINT</code> signal.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents the <code>SIGIO</code> signal.\nRepresents the <code>SIGPIPE</code> signal.\nPolls to receive the next signal notification event, …\nRepresents the <code>SIGQUIT</code> signal.\nReceives the next signal notification event.\nCreates a new listener which will receive notifications …\nRepresents the <code>SIGTERM</code> signal.\nRepresents the <code>SIGUSR1</code> signal.\nRepresents the <code>SIGUSR2</code> signal.\nRepresents the <code>SIGWINCH</code> signal.\nError returned from the <code>Semaphore::acquire</code> function.\nThe cell was already initialized when <code>OnceCell::set</code> was …\nA barrier enables multiple tasks to synchronize the …\nA <code>BarrierWaitResult</code> is returned by <code>wait</code> when all tasks in …\nThe semaphore has been closed and cannot issue new permits.\nThe cell is currently being initialized.\nThe maximum number of permits which a semaphore can hold. …\nA handle to a held <code>Mutex</code> that has had a function applied …\nAn asynchronous <code>Mutex</code>-like type.\nA handle to a held <code>Mutex</code>. The guard can be held across any …\nThe semaphore has no available permits.\nNotifies a single task to wake up.\nA thread-safe cell that can be written to only once.\nA owned handle to a held <code>Mutex</code> that has had a function …\nAn owned handle to a held <code>Mutex</code>.\nOwned RAII structure used to release the exclusive write …\nOwned RAII structure used to release the shared read …\nOwned RAII structure used to release the exclusive write …\nAn owned permit from the semaphore.\nAn asynchronous reader-writer lock.\nRAII structure used to release the exclusive write access …\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nCounting semaphore performing asynchronous permit …\nA permit from the semaphore.\nErrors that can be returned from <code>OnceCell::set</code>.\nError returned from the <code>Semaphore::try_acquire</code> function.\nError returned from the <code>Mutex::try_lock</code>, <code>RwLock::try_read</code> …\nAcquires a permit from the semaphore.\nAcquires <code>n</code> permits from the semaphore.\nAcquires <code>n</code> permits from the semaphore.\nAcquires a permit from the semaphore.\nAdds <code>n</code> new permits to the semaphore.\nReturns the current number of available permits.\nBlockingly locks this <code>Mutex</code>. When the lock has been …\nBlockingly locks this <code>Mutex</code>. When the lock has been …\nBlockingly locks this <code>RwLock</code> with shared read access.\nBlockingly locks this <code>RwLock</code> with exclusive write access.\nA multi-producer, multi-consumer broadcast queue. Each …\nCloses the semaphore.\nCreates a new lock in an unlocked state ready for use.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nCreates a new empty <code>OnceCell</code> instance.\nCreate a new <code>Notify</code>, initialized without a permit.\nCreates a new semaphore with the initial number of permits.\nCreates a new <code>OnceCell</code> that contains the provided value.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked …\nAtomically downgrades a write lock into a read lock …\nAtomically downgrades a write lock into a read lock …\nMakes a new <code>OwnedRwLockReadGuard</code> for a component of the …\nMakes a new <code>RwLockReadGuard</code> for a component of the locked …\nForgets the permit <strong>without</strong> releasing it back to the …\nForgets the permit <strong>without</strong> releasing it back to the …\nDecrease a semaphore’s permits by a maximum of <code>n</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNamed future types.\nReturns a reference to the value currently stored in the …\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the value currently stored …\nGets the value currently in the <code>OnceCell</code>, or initialize it …\nGets the value currently in the <code>OnceCell</code>, or initialize it …\nReturns <code>true</code> if the <code>OnceCell</code> currently contains a value, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the mutex, returning the underlying data.\nConsumes the lock, returning the underlying data.\nTakes the value from the cell, destroying the cell in the …\nConverts this <code>OwnedRwLockWriteGuard</code> into an …\nConverts this <code>RwLockWriteGuard</code> into an …\nWhether <code>SetError</code> is <code>SetError::AlreadyInitializedError</code>.\nReturns true if the semaphore is closed\nWhether <code>SetError</code> is <code>SetError::InitializingError</code>\nReturns <code>true</code> if this task from wait is the “leader task…\nLocks this mutex, causing the current task to yield until …\nLocks this mutex, causing the current task to yield until …\nMakes a new <code>MappedMutexGuard</code> for a component of the locked …\nMakes a new <code>OwnedMappedMutexGuard</code> for a component of the …\nMakes a new <code>MappedMutexGuard</code> for a component of the locked …\nMakes a new <code>OwnedMappedMutexGuard</code> for a component of the …\nMakes a new <code>OwnedRwLockReadGuard</code> for a component of the …\nMakes a new <code>OwnedRwLockMappedWriteGuard</code> for a component of …\nMakes a new <code>OwnedRwLockMappedWriteGuard</code> for a component of …\nMakes a new <code>RwLockReadGuard</code> for a component of the locked …\nMakes a new <code>RwLockMappedWriteGuard</code> for a component of the …\nMakes a new <code>RwLockMappedWriteGuard</code> for a component of the …\nMerge two <code>SemaphorePermit</code> instances together, consuming …\nMerge two <code>OwnedSemaphorePermit</code> instances together, …\nA multi-producer, single-consumer queue for sending values …\nReturns a reference to the original <code>Mutex</code>.\nReturns a reference to the original <code>Arc&lt;Mutex&gt;</code>.\nCreates a new lock in an unlocked state ready for use.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nCreates a new empty <code>OnceCell</code> instance.\nCreates a new barrier that can block a given number of …\nCreate a new <code>Notify</code>, initialized without a permit.\nCreates a new semaphore with the initial number of permits.\nCreates a new <code>OnceCell</code> that contains the provided value, …\nWait for a notification.\nNotifies the last waiting task.\nNotifies the first waiting task.\nNotifies all waiting tasks.\nReturns the number of permits held by <code>self</code>.\nReturns the number of permits held by <code>self</code>.\nA one-shot channel is used for sending a single message …\nLocks this <code>RwLock</code> with shared read access, causing the …\nLocks this <code>RwLock</code> with shared read access, causing the …\nReturns a reference to the original <code>Arc&lt;RwLock&gt;</code>.\nReturns a reference to the original <code>Arc&lt;RwLock&gt;</code>.\nReturns a reference to the original <code>Arc&lt;RwLock&gt;</code>.\nReturns the <code>Semaphore</code> from which this permit was acquired.\nSets the value of the <code>OnceCell</code> to the given value if the …\nSplits <code>n</code> permits from <code>self</code> and returns a new …\nSplits <code>n</code> permits from <code>self</code> and returns a new …\nTakes ownership of the current value, leaving the cell …\nTries to acquire a permit from the semaphore.\nTries to acquire <code>n</code> permits from the semaphore.\nTries to acquire <code>n</code> permits from the semaphore.\nTries to acquire a permit from the semaphore.\nAttempts to make a new <code>OwnedRwLockReadGuard</code> for a …\nAttempts to make a new <code>RwLockReadGuard</code> for a component of …\nAttempts to acquire the lock, and returns <code>TryLockError</code> if …\nAttempts to acquire the lock, and returns <code>TryLockError</code> if …\nAttempts to make a new <code>MappedMutexGuard</code> for a component of …\nAttempts to make a new <code>OwnedMappedMutexGuard</code> for a …\nAttempts to make a new <code>MappedMutexGuard</code> for a component of …\nAttempts to make a new <code>OwnedMappedMutexGuard</code> for a …\nAttempts to make a new <code>OwnedRwLockReadGuard</code> for a …\nAttempts to make a new <code>OwnedRwLockMappedWriteGuard</code> for a …\nAttempts to make a new <code>OwnedRwLockMappedWriteGuard</code> for a …\nAttempts to make a new <code>RwLockReadGuard</code> for a component of …\nAttempts to make a new <code>RwLockMappedWriteGuard</code> for a …\nAttempts to make a new <code>RwLockMappedWriteGuard</code> for a …\nAttempts to acquire this <code>RwLock</code> with shared read access.\nAttempts to acquire this <code>RwLock</code> with shared read access.\nAttempts to acquire this <code>RwLock</code> with exclusive write …\nAttempts to acquire this <code>RwLock</code> with exclusive write …\nDoes not resolve until all tasks have rendezvoused here.\nA multi-producer, multi-consumer channel that only retains …\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked …\nLocks this <code>RwLock</code> with exclusive write access, causing the …\nLocks this <code>RwLock</code> with exclusive write access, causing the …\nReceiving-half of the <code>broadcast</code> channel.\nSending-half of the <code>broadcast</code> channel.\nA sender that does not prevent the channel from being …\nBlocking receive to call outside of asynchronous contexts.\nCreate a bounded, multi-producer, multi-consumer channel …\nA future which completes when the number of Receivers …\nConverts the <code>Sender</code> to a <code>WeakSender</code> that does not count …\nBroadcast error types\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a channel is closed.\nReturns true if there are no queued values.\nReturns true if there aren’t any messages in the channel …\nReturns the number of queued values.\nReturns the number of messages that were sent into the …\nCreates the sending-half of the <code>broadcast</code> channel.\nReturns the number of active receivers.\nReceives the next value for this receiver.\nRe-subscribes to the channel starting from the current …\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if receivers belong to the same channel.\nAttempts to send a value to all active <code>Receiver</code> handles, …\nReturns the number of <code>Sender</code> handles.\nReturns the number of <code>WeakSender</code> handles.\nReturns the number of <code>Sender</code> handles.\nReturns the number of <code>Sender</code> handles.\nCreates a new <code>Receiver</code> handle that will receive values …\nAttempts to return a pending value on this receiver …\nTries to convert a <code>WeakSender</code> into a <code>Sender</code>.\nReturns the number of <code>WeakSender</code> handles.\nReturns the number of <code>WeakSender</code> handles.\nThere are no more active senders implying no further …\nThere are no more active senders implying no further …\nThe channel is currently empty. There are still active …\nThe receiver lagged too far behind. Attempting to receive …\nThe receiver lagged too far behind and has been forcibly …\nAn error returned from the <code>recv</code> function on a <code>Receiver</code>.\nError returned by the <code>send</code> function on a <code>Sender</code>.\nAn error returned from the <code>try_recv</code> function on a <code>Receiver</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFuture returned from <code>Notify::notified()</code>.\nAdds this future to the list of futures that are ready to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOwned permit to send one value into the channel.\nPermits to send one value into the channel.\nAn <code>Iterator</code> of <code>Permit</code> that can be used to hold <code>n</code> slots in …\nReceives values from the associated <code>Sender</code>.\nSends values to the associated <code>Receiver</code>.\nReceive values from the associated <code>UnboundedSender</code>.\nSend values to the associated <code>UnboundedReceiver</code>.\nA sender that does not prevent the channel from being …\nAn unbounded sender that does not prevent the channel from …\nBlocking receive to call outside of asynchronous contexts.\nBlocking receive to call outside of asynchronous contexts.\nVariant of <code>Self::recv_many</code> for blocking contexts.\nVariant of <code>Self::recv_many</code> for blocking contexts.\nBlocking send to call outside of asynchronous contexts.\nReturns the current capacity of the channel.\nReturns the current capacity of the channel.\nCreates a bounded mpsc channel for communicating between …\nCloses the receiving half of a channel without dropping it.\nCloses the receiving half of a channel, without dropping …\nCompletes when the receiver has dropped.\nCompletes when the receiver has dropped.\nConverts the <code>Sender</code> to a <code>WeakSender</code> that does not count …\nConverts the <code>UnboundedSender</code> to a <code>WeakUnboundedSender</code> that …\nChannel error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the channel has been closed. This happens when …\nChecks if a channel is closed.\nChecks if the channel has been closed. This happens when …\nChecks if a channel is closed.\nChecks if a channel is empty.\nChecks if a channel is empty.\nReturns the number of messages in the channel.\nReturns the number of messages in the channel.\nReturns the maximum buffer capacity of the channel.\nReturns the maximum buffer capacity of the channel.\nPolls to receive the next message on this channel.\nPolls to receive the next message on this channel.\nPolls to receive multiple messages on this channel, …\nPolls to receive multiple messages on this channel, …\nReceives the next value for this receiver.\nReceives the next value for this receiver.\nReceives the next values for this receiver and extends …\nReceives the next values for this receiver and extends …\nReleases the reserved capacity <em>without</em> sending a message, …\nWaits for channel capacity. Once capacity to send one …\nWaits for channel capacity. Once capacity to send <code>n</code> …\nWaits for channel capacity, moving the <code>Sender</code> and …\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if senders belong to the same channel.\nSends a value, waiting until there is capacity.\nSends a value using the reserved capacity.\nSends a value using the reserved capacity.\nAttempts to send a message on this <code>UnboundedSender</code> without …\nSends a value, waiting until there is capacity, but only …\nReturns the number of <code>Sender</code> handles.\nReturns the number of <code>UnboundedSender</code> handles.\nReturns the number of <code>WeakSender</code> handles.\nReturns the number of <code>WeakUnboundedSender</code> handles.\nReturns the number of <code>Sender</code> handles.\nReturns the number of <code>Sender</code> handles.\nReturns the number of <code>UnboundedSender</code> handles.\nReturns the number of <code>UnboundedSender</code> handles.\nTries to receive the next value for this receiver.\nTries to receive the next value for this receiver.\nTries to acquire a slot in the channel without waiting for …\nTries to acquire <code>n</code> slots in the channel without waiting …\nTries to acquire a slot in the channel without waiting for …\nAttempts to immediately send a message on this <code>Sender</code>\nCreates an unbounded mpsc channel for communicating …\nTries to convert a <code>WeakSender</code> into a <code>Sender</code>. This will …\nTries to convert a <code>WeakUnboundedSender</code> into an …\nReturns the number of <code>WeakSender</code> handles.\nReturns the number of <code>WeakSender</code> handles.\nReturns the number of <code>WeakUnboundedSender</code> handles.\nReturns the number of <code>WeakUnboundedSender</code> handles.\nThe receive half of the channel was explicitly closed or …\nThe receive half of the channel was explicitly closed or …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nThe data could not be sent on the channel because the …\nError returned by the <code>Sender</code>.\nError returned by <code>Sender::send_timeout</code>].\nThe data could not be sent on the channel because the …\nError returned by <code>try_recv</code>.\nThis enumeration is the list of the possible error …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the <code>TrySendError</code>, returning the unsent value.\nConsume the <code>SendTimeoutError</code>, returning the unsent value.\nReceives a value from the associated <code>Sender</code>.\nSends a value to the associated <code>Receiver</code>.\nBlocking receive to call outside of asynchronous contexts.\nCreates a new one-shot channel for sending single values …\nPrevents the associated <code>Sender</code> handle from sending a value.\nWaits for the associated <code>Receiver</code> handle to close.\n<code>Oneshot</code> error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the associated <code>Receiver</code> handle has been …\nChecks if a channel is empty.\nChecks if this receiver is terminated.\nChecks whether the <code>oneshot</code> channel has been closed, and if …\nAttempts to send a value on this channel, returning it …\nAttempts to receive a value.\nThe send half of the channel was dropped without sending a …\nThe send half of the channel has not yet sent a value.\nError returned by the <code>Future</code> implementation for <code>Receiver</code>.\nError returned by the <code>try_recv</code> function on <code>Receiver</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReceives values from the associated <code>Sender</code>.\nReturns a reference to the inner value.\nSends values to the associated <code>Receiver</code>.\nReturns a reference to the most recently sent value.\nReturns a reference to the most recently sent value\nReturns a reference to the most recently sent value and …\nWaits for a change notification, then marks the newest …\nCreates a new watch channel, returning the “send” and …\nCompletes when all receivers have dropped.\nWatch error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks if this channel contains a message that this …\nIndicates if the borrowed value is considered as <em>changed</em> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the channel has been closed. This happens when …\nMarks the state as changed.\nMarks the state as unchanged.\nCreates the sending-half of the <code>watch</code> channel.\nReturns the number of receivers that currently exist.\nReturns <code>true</code> if receivers belong to the same channel.\nReturns <code>true</code> if senders belong to the same channel.\nSends a new value via the channel, notifying all receivers.\nModifies the watched value <strong>conditionally</strong> in-place, …\nModifies the watched value <strong>unconditionally</strong> in-place, …\nSends a new value via the channel, notifying all receivers …\nReturns the number of senders that currently exist.\nCreates a new <code>Receiver</code> connected to this <code>Sender</code>.\nWaits for a value that satisfies the provided condition.\nError produced when receiving a change notification.\nError produced when sending a value fails.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn owned permission to abort a spawned task, without …\nAn opaque ID that uniquely identifies a task relative to …\nTask failed to execute to completion.\nAn owned permission to join on a task (await its …\nA collection of tasks spawned on a Tokio runtime.\nContext guard for <code>LocalSet</code>\nA key for task-local data.\nA set of tasks which are executed on the same thread.\nFuture for the <code>unconstrained</code> method.\nAbort the task associated with the handle.\nAbort the task associated with the handle.\nAborts all tasks on this <code>JoinSet</code>.\nReturns a new <code>AbortHandle</code> that can be used to remotely …\nRuns the provided blocking function on the current thread …\nRuns a future to completion on the provided runtime, …\nReturns a cloned <code>AbortHandle</code> that can be used to remotely …\nConsumes a unit of budget and returns the execution back …\nUtilities for improved cooperative scheduling.\nRemoves all tasks from this <code>JoinSet</code> without aborting them.\nEnters the context of this <code>LocalSet</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTask-related futures.\nReturns a copy of the task-local value if the task-local …\nReturns the <code>Id</code> of the currently running task.\nReturns a task ID that uniquely identifies this task …\nReturns a task ID that identifies the task which errored …\nReturns a task ID that uniquely identifies this task …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the join error, returning the object with which …\nReturns true if the error was caused by the task being …\nReturns whether the <code>JoinSet</code> is empty.\nChecks if the task associated with this <code>AbortHandle</code> has …\nChecks if the task associated with this <code>JoinHandle</code> has …\nReturns true if the error was caused by the task panicking.\nAwaits the completion of all tasks in this <code>JoinSet</code>, …\nWaits until one of the tasks in the set completes and …\nWaits until one of the tasks in the set completes and …\nReturns the number of tasks currently in the <code>JoinSet</code>.\nCreate a new <code>JoinSet</code>.\nReturns a new local task set.\nPolls for one of the tasks in the set to complete.\nPolls for one of the tasks in the set to complete.\nRuns a future to completion on the local set, returning …\nSets a value <code>T</code> as the task-local value for the future <code>F</code>.\nAborts all tasks and waits for them to finish shutting …\nSpawns a new asynchronous task, returning a <code>JoinHandle</code> for …\nSpawn the provided task on the <code>JoinSet</code>, returning an …\nRuns the provided closure on a thread where blocking is …\nSpawn the blocking code on the blocking threadpool and …\nSpawn the blocking code on the blocking threadpool of the …\nSpawns a <code>!Send</code> future on the current <code>LocalSet</code> or …\nSpawn the provided task on the current <code>LocalSet</code> and store …\nSpawns a <code>!Send</code> task onto the local task set.\nSpawn the provided task on the provided <code>LocalSet</code> and store …\nSpawn the provided task on the provided runtime and store …\nSets a value <code>T</code> as the task-local value for the closure <code>F</code>.\nReturns the <code>Id</code> of the currently running task, or <code>None</code> if …\nConsumes the join error, returning the object with which …\nTries to join one of the tasks in the set that has …\nTries to join one of the tasks in the set that has …\nAccesses the current task-local and runs the provided …\nTurn off cooperative scheduling for a future. The future …\nAccesses the current task-local and runs the provided …\nYields execution back to the Tokio runtime.\nFuture for the <code>unconstrained</code> method.\nConsumes a unit of budget and returns the execution back …\nReturns <code>true</code> if there is still budget left on the task.\nTurn off cooperative scheduling for a future. The future …\nA future that sets a value <code>T</code> of a task local for the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value stored in the task local by this …\nTicks as fast as possible until caught up.\nTick at multiples of <code>period</code> from when <code>tick</code> was called, …\nA <code>Duration</code> type to represent a span of time, typically …\nA measurement of a monotonically nondecreasing clock. …\nInterval returned by <code>interval</code> and <code>interval_at</code>.\nThe maximum duration.\nThe duration of one microsecond.\nThe duration of one millisecond.\nDefines the behavior of an <code>Interval</code> when it misses a tick.\nThe duration of one nanosecond.\nThe duration of one second.\nSkips missed ticks and tick on the next multiple of <code>period</code> …\nFuture returned by <code>sleep</code> and <code>sleep_until</code>.\nFuture returned by <code>timeout</code> and <code>timeout_at</code>.\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nPanics\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nReturns the amount of time elapsed from another instant to …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nReturns the instant at which the future will complete.\nReturns <code>MissedTickBehavior::Burst</code>.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f32</code>.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f64</code>.\nDivides <code>Duration</code> by <code>f32</code>.\nDivides <code>Duration</code> by <code>f64</code>.\nReturns the amount of time elapsed from another instant to …\nReturns the amount of time elapsed since this instant was …\nTime error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreate a <code>tokio::time::Instant</code> from a <code>std::time::Instant</code>.\nCreates a new <code>Duration</code> from the specified number of weeks.\nGets a mutable reference to the underlying value in this …\nGets a reference to the underlying value in this timeout.\nCreates new <code>Interval</code> that yields with interval of <code>period</code>. …\nCreates new <code>Interval</code> that yields with interval of <code>period</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this timeout, returning the underlying value.\nConvert the value into a <code>std::time::Instant</code>.\nReturns <code>true</code> if <code>Sleep</code> has elapsed.\nReturns true if this <code>Duration</code> spans no time.\nReturns the <code>MissedTickBehavior</code> strategy currently being …\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nCreates a new <code>Duration</code> from the specified number of whole …\nReturns an instant corresponding to “now”.\nReturns the period of the interval.\nPolls for the next instant in the interval to be reached.\nResets the interval to complete one period after the …\nResets the <code>Sleep</code> instance to a new deadline.\nResets the interval after the specified <code>std::time::Duration</code>…\nResets the interval to a <code>crate::time::Instant</code> deadline.\nResets the interval immediately.\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nReturns the amount of time elapsed from another instant to …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nSets the <code>MissedTickBehavior</code> strategy that should be used.\nWaits until <code>duration</code> has elapsed.\nWaits until <code>deadline</code> is reached.\nPanics\nPanics\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nCompletes when the next instant in the interval has been …\nRequires a <code>Future</code> to complete before the specified …\nRequires a <code>Future</code> to complete before the specified instant …\nConverts a <code>Duration</code> to a <code>std::time::Duration</code>, failing if …\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nErrors returned by <code>Timeout</code>.\nErrors encountered by the timer implementation.\nCreates an error representing a timer at capacity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an error representing a misconfigured timer.\nReturns <code>true</code> if the error was caused by the timer being at …\nReturns <code>true</code> if the error was caused by the timer being …\nReturns <code>true</code> if the error was caused by the timer being …\nCreates an error representing a shutdown timer.\nGet a valid, finite range for the gpu to use.\n<code>colormap</code> is currently only used for depth images.\nRender the given image, respecting the clip rectangle of …\nDetermines if and how the shader needs to decode the image.\nReturn whether a tensor should be assumed to be encoded in …\nCreates a <code>ImageDataDesc</code> for creating a texture from an …\nLoad a blueprint from persisted storage, e.g. disk. …\nHow to save and load blueprints\nSave a blueprint to persisted storage, e.g. disk.\nValidate a blueprint against the current blueprint schema …\nInterface for accessing all blueprints and recordings\nConvenient information used for <code>MemoryPanel</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHarness to execute code that rely on <code>crate::ViewerContext</code>.\nTimeline the recording config is using by default.\nReturns the argument unchanged.\nBest-effort attempt to meaningfully handle some of the …\nCalls <code>U::from(self)</code>.\nLog an entity to the recording store.\nRegister a view class.\nRun the provided closure with a <code>ViewerContext</code> produced by …\nRun the given function with a <code>ViewerContext</code> produced by …\nRun the given function once with a <code>ViewerContext</code> produced …\nInspect or update the blueprint of a <code>TestContext</code>.\nFails the test iff more than <code>broken_percent_threshold</code>% …\nDefines the UI and layout of the Viewport.\nThe blueprint that drives this viewport. This is the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLike <code>ChunksWithDescriptor</code> but for a single chunk.\nA helper struct that bundles a list of chunks with a …\nWrapper that contains the results of a latest-at query …\nWrapper that contains the results of a range query with …\nThe iterator type backing <code>HybridResults::iter_as</code>.\nExtension traits to abstract query result handling for all …\nGap between lines and their outline.\nGap between points and their outline.\nClamp the last value in <code>values</code> in order to reach a length …\nIterate as indexed deserialized batches.\nUtility for implementing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUtility for retrieving a single instance of a component.\nUtility for retrieving a single instance of a component.\nUtility for retrieving the first instance of a component.\nUtility for retrieving the first instance of a component.\nReturns component data for the given component or an empty …\nReturns component data for the given component, ignores …\nUtility for retrieving a single instance of a component, …\nUtility for retrieving the first instance of a component, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a zero-copy iterator over all the results for the …\nSee <code>Chunk::iter_component</code>.\nSee <code>Chunk::iter_component_indices</code>.\nSee <code>Chunk::iter_component_timepoints</code>.\nSee <code>Chunk::iter_slices</code>.\nQueries for the given <code>component_names</code> using latest-at …\nProduce an <code>re_renderer::OutlineConfig</code> based on the …\nResolves all annotations and keypoints for the given …\nResolves all annotations for the given entity view.\nProcess <code>Color</code> components using annotations and default …\nQueries for all components of an archetype, taking into …\nQueries for the given components, taking into account:\nQueries for the given <code>component_names</code> using range …\nIterate as indexed, sliced, deserialized component batches.\nIterate as indexed, sliced, deserialized component batches …\nSpawns a view for each single entity which is visualizable …\nDraw view property ui for a single component of a view …\nDraw view property ui for a single component of a view …\nDisplay the UI for editing all components of a blueprint …\nModifier to press for scroll to change aspect ratio.\nWhich mouse button to drag for panning a 2D view.\nWhich mouse button to drag for panning a 2D view.\nModifier to press for scroll to pan horizontally.\nClicking this button moves the timeline to where the …\nWhich mouse button rolls the camera.\nWhich mouse button rolls the camera if the roll modifier …\nSee <code>ROLL_MOUSE_ALT</code>.\nWhich mouse button to drag for rotating a 3D view.\nRectangles drawn with this mouse button zoom in 2D views.\nWhich modifier speeds up the 3D camera movement.\nKey to restore the camera.\nModifier to press for scroll to zoom.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA builder for creating a UUID.\nA 128-bit (16 byte) buffer containing the UUID.\nA counter that can be used by versions 1 and 6 UUIDs to …\nVersion 8: Custom.\nVersion 2: DCE Security.\nA general error that can occur when working with UUIDs.\nReserved for future expansion.\nVersion 1: Timestamp and node ID.\nThe “max” (all ones) UUID.\nVersion 3: MD5 hash.\nReserved by Microsoft for backward compatibility.\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nReserved by the NCS for backward compatibility.\nThe “nil” (all zeros) UUID.\nAn empty counter that will always return the value <code>0</code>.\nA UUID that is guaranteed not to be the nil UUID.\nThe type of sequence returned by this counter.\nAs described in the RFC 9562 Specification (default). (for …\nVersion 4: Random.\nVersion 5: SHA-1 hash.\nVersion 6: Sortable Timestamp and node ID.\nVersion 7: Timestamp and random.\nA timestamp that can be encoded into a UUID.\nA Universally Unique Identifier (UUID).\nThe reserved variants of UUIDs.\nThe version of the UUID, denoting the generating algorithm.\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nGet a borrowed <code>Simple</code> formatter.\nReturns a 128bit value containing the value.\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nGet a reference to the underlying <code>Uuid</code>.\nGet a <code>Braced</code> formatter.\nA buffer that can be used for <code>encode_...</code> calls, that is …\nAdapters for alternative string formats.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>NonNilUuid</code> back into a <code>Uuid</code>.\nCreates a <code>Builder</code> using the supplied bytes.\nCreates a UUID using the supplied bytes.\nCreates a <code>Builder</code> using the supplied bytes in little …\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nCreates a <code>Builder</code> for a version 8 UUID using the supplied …\nCreates a <code>Builder</code> from four field values.\nCreates a UUID from four field values.\nCreates a <code>Builder</code> from four field values.\nCreates a UUID from four field values in little-endian …\nConstruct a <code>Timestamp</code> from the number of 100 nanosecond …\nCreates a <code>Builder</code> for a version 1 UUID using the supplied …\nCreates a <code>Builder</code> for a version 3 UUID using the supplied …\nCreates a <code>Builder</code> for a version 4 UUID using the supplied …\nCreates a <code>Builder</code> for a version 5 UUID using the supplied …\nCreates a <code>Builder</code> using the supplied bytes.\nCreates a UUID using the supplied bytes.\nCreates a <code>Builder</code> using the supplied bytes in little …\nCreates a UUID using the supplied bytes in little endian …\nCreates a <code>Builder</code> for a version 6 UUID using the supplied …\nCreates a <code>Builder</code> from a 128bit value.\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nConstruct a <code>Timestamp</code> from a Unix timestamp and up to a …\nConstruct a <code>Timestamp</code> from a Unix timestamp and up to a …\nCreates a <code>Builder</code> for a version 7 UUID using the supplied …\nGet the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nGet the underlying <code>Uuid</code> value.\nIf the UUID is the correct version (v1, or v6) this will …\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nGet a <code>Hyphenated</code> formatter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the underlying byte value of the …\nConvert the builder into a <code>Uuid</code>.\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\nThe ‘max UUID’ (all ones).\nCreates a non-nil UUID if the value is non-nil.\nCreates a non-nil without checking whether the value is …\nCreates a random UUID.\nCreates a <code>Builder</code> with an initial <code>Uuid::nil</code>.\nThe ‘nil UUID’ (all zeros).\nGet a timestamp representing the current system time and …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nAdapters for alternative <code>serde</code> formats.\nSpecifies the variant of the UUID.\nSpecifies the version number of the UUID.\nGet a <code>Simple</code> formatter.\nGenerating UUIDs from timestamps.\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nGet the value of the timestamp as the number of 100 …\nReturns a 128bit little-endian value containing the value.\nGet the value of the timestamp as a Unix timestamp, as …\nAttempts to convert a <code>Uuid</code> into a <code>NonNilUuid</code>.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nGet a <code>Urn</code> formatter.\nThe number of usable bits from the least significant bit …\nParse <code>Uuid</code>s from string literals at compile time.\nSpecifies the variant of the UUID.\nSpecifies the version number of the UUID.\nFormat a <code>Uuid</code> as a braced hyphenated string, like …\nFormat a <code>Uuid</code> as a hyphenated string, like …\nThe length of a hyphenated <code>Uuid</code> string.\nThe length of a simple <code>Uuid</code> string.\nThe length of a URN <code>Uuid</code> string.\nThe length of a braced <code>Uuid</code> string.\nFormat a <code>Uuid</code> as a simple string, like …\nFormat a <code>Uuid</code> as a URN string, like …\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nWrites the <code>Uuid</code> as a lower-case hyphenated string to <code>buffer</code>…\nWrites the <code>Uuid</code> as a lower-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as a lower-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as a lower-case hyphenated string …\nWrites the <code>Uuid</code> as an upper-case hyphenated string to …\nWrites the <code>Uuid</code> as an upper-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as an upper-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as an upper-case hyphenated string …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Hyphenated</code> from a <code>Uuid</code>.\nCreates a <code>Simple</code> from a <code>Uuid</code>.\nCreates a <code>Urn</code> from a <code>Uuid</code>.\nCreates a <code>Braced</code> from a <code>Uuid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Hyphenated</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Simple</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Urn</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Braced</code>, returning the underlying <code>Uuid</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nSerialize a <code>Uuid</code> as a <code>[u8; 16]</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nDeserialize a braced Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nDeserialize a <code>[u8; 16]</code> as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>[u8; 16]</code>\nDeserialize a simple Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nDeserialize a urn Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nA counter that can be used by versions 1 and 6 UUIDs to …\nThe type of sequence returned by this counter.\nA timestamp that can be encoded into a UUID.\nThe number of 100 nanosecond ticks between the RFC 9562 …\nDefault implementations for the <code>ClockSequence</code> trait.\nGet the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nThe number of usable bits from the least significant bit …\nAn empty counter that will always return the value <code>0</code>.\nA wrapper for a context that uses thread-local storage.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrap a thread-local container with a context.\nA <code>crate::sink::LogSink</code> tied to a hosted Rerun gRPC server.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>bind_ip</code> of <code>&quot;0.0.0.0&quot;</code> is a good default.\nWhat to connect the viewer to\nAlways flushes ASAP.\nLog an entity using an <code>ArrowMsg</code>.\nSend after all messages in a blueprint to signal that the …\nDense arrow-based storage of N rows of multi-component …\nImplements an asynchronous batcher that coalesces …\nDefines the different thresholds of the associated …\nErrors that can occur when creating/manipulating a …\nErrors that can occur when creating/manipulating a <code>Chunk</code>s, …\nA unique ID for a <code>Chunk</code>.\nDefault configuration, applicable to most use cases.\nEnvironment variable to configure …\nEnvironment variable to configure <code>Self::flush_num_bytes</code>.\nEnvironment variable to configure <code>Self::flush_num_rows</code>.\nEnvironment variable to configure <code>Self::flush_tick</code>.\nContains the error value\nContains the error value\nThe most general log message sent from the SDK to the …\nNever flushes unless manually told to (or hitting one the …\nContains the success value\nContains the success value\nError when parsing configuration from environment.\nA single row’s worth of data (i.e. a single log call).\nA unique ID for a row’s worth of data within a chunk.\nA new recording has begun.\nError spawning one of the background threads.\nUnconditionally inserts an <code>ArrowListArray</code> as a component …\nUnconditionally inserts a <code>TimeColumn</code>.\nReturns a copy of <code>self</code>, overriding existing fields with …\nInitializes a new <code>ChunkBuilder</code>.\nInitializes a new <code>ChunkBuilder</code>.\nReturns the cell corresponding to the specified <code>RowId</code> for …\nSplit a chunk if it contains &gt;= rows than this threshold …\nReturns a <em>shared</em> channel in which are sent the batched …\nClones the chunk and assign new IDs to the resulting chunk …\nReturns the deserialized data for the specified component.\nReturns the raw data for the specified component.\nReturns the component data of the specified instance.\nReturns the raw data for the specified component at the …\nReturns the deserialized data for the specified component, …\nReturns the raw data for the specified component, assuming …\nReturns an iterator over the <code>RowId</code>s of a <code>Chunk</code>, for a …\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nThe component data.\nRemoves all component columns from the <code>Chunk</code>.\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nReturns true if two chunks are concatenable.\nConcatenates two <code>Chunk</code>s into a new one.\nWhether any of the components in this chunk has the given …\nRemoves duplicate rows from sections of consecutive …\nDensifies the <code>Chunk</code> vertically based on the …\nEmpties the <code>Chunk</code> vertically.\nApproximate equal, that ignores small numeric differences.\nReturns <code>Ok</code> if two <code>Chunk</code>s are <em>similar</em>, although not …\nApplies a filter kernel to the <code>Chunk</code> as a whole.\nInitiates a flush of the pipeline and returns immediately.\nInitiates a flush the batching pipeline and waits for it …\nFlush if the accumulated payload has a size in bytes equal …\nFlush if the accumulated payload has a number of rows …\nDuration of the periodic tick.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Chunk</code>.\nCreates a new <code>ChunkBatcherConfig</code> using the default values, …\nCreates a new <code>Chunk</code>.\nReturns all list arrays for the given component name.\nWhether any of the components in this chunk is tagged with …\nCallbacks you can install on the <code>ChunkBatcher</code>.\nReturns the <code>n</code>-next logical <code>ChunkId</code>.\nReturns the <code>n</code>-next logical <code>RowId</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn a single row into a <code>Chunk</code> of its own.\nClones the chunk into a new chunk without any time data.\nTurns the chunk into a <code>UnitChunkShared</code>, if possible.\nIs the chunk currently ascendingly sorted by <code>crate::RowId</code>?\nIs the chunk ascendingly sorted by time, for all of its …\nIs the chunk ascendingly sorted by time, for a specific …\nReturns an iterator over the deserialized batches of a …\nReturns an iterator over the indices (<code>(TimeInt, RowId)</code>) of …\nReturns an iterator over the offsets (<code>(offset, len)</code>) of a …\nReturns an iterator over the <code>TimePoint</code>s of a <code>Chunk</code>, for a …\nReturns an iterator over the indices (<code>(TimeInt, RowId)</code>) of …\nReturns an iterator over the indices (<code>(TimeInt, RowId)</code>) of …\nReturns an iterator over the all the sliced component …\nReturns an iterator over the all the sliced component …\nReturns an iterator over the <code>TimePoint</code>s of a <code>Chunk</code>.\nRuns a <code>LatestAtQuery</code> filter on a <code>Chunk</code>.\nThis turns a batch of <code>PendingRow</code>s into a <code>Chunk</code>.\nSize of the internal channel of <code>Chunk</code>s.\nSize of the internal channel of commands.\nCreates a new <code>Chunk</code>.\nCreate a new unique <code>ChunkId</code> based on the current time.\nCreates a new <code>ChunkBatcher</code> using the passed in <code>config</code>.\nCreate a new unique <code>RowId</code> based on the current time.\nSimple helper for <code>Self::new</code> for static data.\nReturns the next logical <code>ChunkId</code>.\nReturns the next logical <code>RowId</code>.\nHow many columns in total? Includes control, time, and …\nThe cumulative number of events in this chunk.\nThe cumulative number of events in this chunk for each …\nThe number of events in this chunk for the specified …\nReturns <code>true</code> if <code>self</code> and <code>rhs</code> overlap on their <code>RowId</code> range.\nReturns <code>true</code> if <code>self</code> and <code>rhs</code> overlap on any of their time …\nA temporary migration kernel for blueprint data.\nWe look for indicator component descriptors that have an …\nPushes a <code>PendingRow</code> down the batching pipeline.\nRuns a <code>RangeQuery</code> filter on a <code>Chunk</code>.\nAuto-generated <code>TUID</code>, uniquely identifying this event and …\nReturns the <code>RowId</code>-range covered by this <code>Chunk</code>.\nComputes the <code>RowId</code> range covered by each individual …\nAll the <code>RowId</code> in this chunk.\nSlices the <code>Chunk</code> vertically.\nReturns <code>true</code> if both chunks share the same datatypes for …\nReturns <code>true</code> if both chunks share the same descriptors for …\nReturns <code>true</code> if both chunks share the same entity path.\nReturns <code>true</code> if both chunks contains the same set of …\nReturns an error if the Chunk’s invariants are not …\nRandomly shuffles the chunk using the given <code>seed</code>.\nPanics if the array is of the wrong width\nSort the chunk, if needed.\nReturns a new <code>Chunk</code> that is sorted by <code>(&lt;timeline&gt;, RowId)</code>.\nMoves all indicator components from <code>self</code> into a new, …\nApplies a take kernel to the <code>Chunk</code> as a whole.\nComputes the time range covered by each individual …\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nUser-specified <code>TimePoint</code> for this event.\nComputes the maximum value for each and every timeline …\nPrepare the <code>Chunk</code> for transport.\nPrepare the <code>Chunk</code> for transport.\nTurns the chunk into a <code>UnitChunkShared</code>, if possible.\nReturns a version of us with a new <code>ChunkId</code>.\nClones the chunk into a new chunk where all <code>RowId</code>s are …\nImplements a <code>log::Log</code> that forwards all events to the …\nReturns the argument unchanged.\nSets the <code>Logger</code> as global logger.\nCalls <code>U::from(self)</code>.\nReturns a new <code>Logger</code> that forwards all events to the …\nConfigures the <code>Logger</code> to filter events.\nConfigures the <code>Logger</code> to prefix the specified <code>path_prefix</code> …\nStarts a Rerun viewer to visualize the contents of a given …\nThe user-chosen name of the application doing the logging.\nAn archetype is a high-level construct that represents a …\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nE.g. too many values (overflows i32).\nDescribes the interface for interpreting an object as a …\nData associated with the blueprint state.\nError within the underlying chunk batcher.\nError within the underlying chunk batcher.\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nA <code>ComponentDescriptor</code> fully describes the semantics of a …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nThe default URL of a Rerun gRPC /proxy server.\nThe default port of a Rerun gRPC /proxy server.\nA <code>DataLoader</code> loads data from a file path and/or a file’s …\nErrors that might happen when loading data through a …\nAn error occurred while attempting to use a …\nRecommended settings for the <code>DataLoader</code>.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nThe different parts that make up an <code>EntityPath</code>.\nContains the error value\nContains the error value\nContains the error value\nFailed to find Rerun Viewer executable at explicit path.\nFailed to find Rerun Viewer executable in PATH.\nError within the underlying file sink.\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA unique numeric index for each individual instance within …\nInvalid bind IP.\nOther I/O error.\nWhat <code>DataLoader</code>s load.\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nRepresents a limit in how much RAM to use for the entire …\nAn arbitrary named indicator component.\nInvalid endpoint\nContains the success value\nContains the success value\nContains the success value\nA recording of user-data.\n<strong>Archetype</strong>: A list of properties associated with a …\nA <code>RecordingStream</code> handles everything related to logging …\nConstruct a <code>RecordingStream</code>.\nErrors that can occur when creating/manipulating a …\nResults that can occur when creating/manipulating a …\nError within the underlying serializer.\nThe serialized contents of a <code>ComponentBatch</code> with …\nA column’s worth of component data.\nApproximations of stack and heap size for both internal …\nErrors that can occur when <code>spawn</code>ing a Rerun Viewer.\nOptions to control the behavior of <code>spawn</code>.\nError spawning one of the background threads.\nError spawning a Rerun Viewer process.\nA unique id per store.\nWhat kind of Store this is.\nAn typed cell of an index, e.g. a point in time on some …\nA point in time on any number of <code>Timeline</code>s.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nInvalid gRPC server address.\nFailure to host a web viewer and/or Rerun server.\nReturns all component descriptors that must, should and …\nReturns all component descriptors that must, should and …\nReturns all component descriptors that must, should and …\nReturns all component descriptors that must, should and …\nReturns all component descriptors that must, should and …\nReturns all component descriptors that must, should and …\nReturns all component descriptors that must, should and …\nThe recommended <code>re_log_types::ApplicationId</code> to log the …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nArchetype are the high-level things you can log, like <code>Image</code>…\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nExposes the object’s contents as a set of …\nThe version of the Rerun SDK.\nCheck whether we are the child of a fork.\nSemantic name associated with this data.\nComponents are the basic building blocks of <code>archetypes</code>.\nCoordinate system helpers, for use with …\nThe low-level datatypes that <code>components</code> are built from.\nChecks the <code>RERUN</code> environment variable. If not found, …\nThe default amount of time to wait for the gRPC connection …\nThe default address of a Rerun gRPC server which an SDK …\nReturns the complete <code>ComponentDescriptor</code> for this <code>Component</code>…\nReturns the complete <code>ComponentDescriptor</code> for this …\nDetach Rerun Viewer process from the application process.\nReadable name for displaying in UI.\nBuild an <code>EntityPath</code> from parts that are <em>not</em> escaped:\nWhat should the logged entity paths be prefixed with?\nSpecifies the name of the Rerun executable.\nEnforce a specific executable to use instead of searching …\nRe-exports of other crates.\nExtra arguments that will be passed as-is to the Rerun …\nExtra environment variables that will be passed as-is to …\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nReturns path for force sink if private environment …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an Arrow array, deserializes it into a collection of …\nMethod for spawning a gRPC server and streaming the SDK …\nReturns how many bytes <code>self</code> uses on the heap.\nHide the welcome screen.\nCreates a <code>ComponentBatch</code> out of the associated …\nIs <code>Self</code> just plain old data?\nIs <code>Self</code> just plain old data?\nIs <code>Self</code> just plain old data?\nIs <code>Self</code> just plain old data?\nIs <code>Self</code> just plain old data?\nLoads data from in-memory file contents and sends it to <code>tx</code>.\nLoads data from a file on the local filesystem and sends …\nThings directly related to logging.\nLimit in bytes.\nAn upper limit on how much memory the Rerun Viewer should …\nThe fully-qualified name of this archetype, e.g. …\nName of the <code>DataLoader</code>.\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nA user-chosen name for the recording.\nCreates a new <code>re_log_types::StoreInfo</code> which can be used …\nThe <code>re_log_types::ApplicationId</code> that is currently opened …\nThe <code>re_log_types::StoreId</code> that is currently opened in the …\nReturns all component descriptors that <em>may</em> be provided by …\nReturns all component descriptors that <em>may</em> be provided by …\nReturns all component descriptors that <em>may</em> be provided by …\nReturns all component descriptors that <em>may</em> be provided by …\nReturns all component descriptors that <em>may</em> be provided by …\nReturns all component descriptors that <em>may</em> be provided by …\nReturns all component descriptors that <em>may</em> be provided by …\nThe port to listen on.\nReturns all component descriptors that <em>should</em> be provided …\nReturns all component descriptors that <em>should</em> be provided …\nReturns all component descriptors that <em>should</em> be provided …\nReturns all component descriptors that <em>should</em> be provided …\nReturns all component descriptors that <em>should</em> be provided …\nReturns all component descriptors that <em>should</em> be provided …\nReturns all component descriptors that <em>should</em> be provided …\nReturns all component descriptors that <em>must</em> be provided by …\nSerializes the contents of this <code>ComponentBatch</code>.\nSerializes the contents of this <code>ComponentBatch</code>.\nSerializes the contents of this <code>ComponentBatch</code>.\nSerializes the contents of this <code>ComponentBatch</code>.\nSerializes the contents of this <code>ComponentBatch</code>.\nSerializes the contents of this <code>ComponentBatch</code>.\nSerializes the contents of this <code>ComponentBatch</code>.\nServes the Rerun Web Viewer (HTML+JS+Wasm) over http.\nDifferent destinations for log messages.\nSpawns a new Rerun Viewer process ready to listen for …\nReturns the total size of <code>self</code> on the stack, in bytes.\nReturns the total size of <code>self</code> on the stack, in bytes.\nReturns the total size of <code>self</code> on the stack, in bytes.\nReturns the total size of <code>self</code> on the stack, in bytes.\nReturns the total size of <code>self</code> on the stack, in bytes.\nWhen the recording started.\nThe recommended <code>re_log_types::StoreId</code> to log the data to, …\nTime-related types.\nAt what time(s) should the data be logged to?\nSerializes the batch into an Arrow array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nSerializes all non-null <code>Component</code>s of this bundle into …\nSerializes all non-null <code>Component</code>s of this bundle into …\nSerializes all non-null <code>Component</code>s of this bundle into …\nSerializes all non-null <code>Component</code>s of this bundle into …\nSerializes all non-null <code>Component</code>s of this bundle into …\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow list array with a …\nSerializes the batch into an Arrow list array with a …\nSerializes the batch into an Arrow list array with a …\nSerializes the batch into an Arrow list array with a …\nSerializes the batch into an Arrow list array with a …\nSerializes the batch into an Arrow list array with a …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nReturns the total size of <code>self</code> in bytes, accounting for …\nReturns the total size of <code>self</code> in bytes, accounting for …\nReturns the total size of <code>self</code> in bytes, accounting for …\nReturns the total size of <code>self</code> in bytes, accounting for …\nReturns the total size of <code>self</code> in bytes, accounting for …\nTransform helpers, for use with <code>archetypes::Transform3D</code>.\nSerializes the contents of this <code>ComponentBatch</code>.\nSerializes the contents of this <code>ComponentBatch</code>.\nSerializes the contents of this <code>ComponentBatch</code>.\nSerializes the contents of this <code>ComponentBatch</code>.\nSerializes the contents of this <code>ComponentBatch</code>.\nSerializes the contents of this <code>ComponentBatch</code>.\nSerializes the contents of this <code>ComponentBatch</code>.\nVerifies that the given Arrow array can be deserialized …\nVerifies that the given Arrow array can be deserialized …\nVerifies that the given Arrow array can be deserialized …\nVerifies that the given Arrow array can be deserialized …\nVerifies that the given Arrow array can be deserialized …\nVerifies that the given Arrow array can be deserialized …\nVerifies that the given Arrow array can be deserialized …\nIf <code>true</code>, the call to <code>spawn</code> will block until the Rerun …\nMethods for spawning the web viewer and streaming the SDK …\nInner error explaining why the thread failed to spawn.\nName of the thread\nName used for the executable search.\nExplicit path of the executable (specified by the caller).\nHigh-level error message meant to be printed to the user …\nValue of the <code>PATH</code> environment variable, if any.\n<strong>Archetype</strong>: The annotation context provides additional …\n<strong>Archetype</strong>: 2D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: 3D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, …\n<strong>Archetype</strong>: A video binary.\n<strong>Archetype</strong>: A bar chart.\n<strong>Archetype</strong>: 2D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D capsules; cylinders with hemispherical caps.\n<strong>Archetype</strong>: Empties all the components of an entity.\n<strong>Archetype</strong>: A depth image, i.e. as captured by a depth …\n<strong>Archetype</strong>: 3D ellipsoids or spheres.\n<strong>Archetype</strong>: An image encoded as e.g. a JPEG or PNG.\n<strong>Archetype</strong>: Geospatial line strings with positions …\n<strong>Archetype</strong>: Geospatial points with positions expressed in …\n<strong>Archetype</strong>: A list of edges in a graph.\n<strong>Archetype</strong>: A list of nodes in a graph with optional …\n<strong>Archetype</strong>: A monochrome or color image.\n<strong>Archetype</strong>: One or more transforms between the current …\n<strong>Archetype</strong>: 2D line strips with positions and optional …\n<strong>Archetype</strong>: 3D line strips with positions and optional …\n<strong>Archetype</strong>: A 3D triangle mesh as specified by its per-mesh …\n<strong>Archetype</strong>: Camera perspective projection (a.k.a. …\n<strong>Archetype</strong>: A 2D point cloud with positions and optional …\n<strong>Archetype</strong>: A 3D point cloud with positions and optional …\n<strong>Archetype</strong>: A list of properties associated with a …\n<strong>Archetype</strong>: One or more double-precision scalar values, …\n<strong>Archetype</strong>: An image made up of integer <code>components::ClassId</code>…\n<strong>Archetype</strong>: Define the style properties for one or more …\n<strong>Archetype</strong>: Define the style properties for one or more …\n<strong>Archetype</strong>: An N-dimensional array of numbers.\n<strong>Archetype</strong>: A text element intended to be displayed in its …\n<strong>Archetype</strong>: A log entry in a text log, comprised of a text …\n<strong>Archetype</strong>: A transform between two 3D spaces, i.e. a pose.\n<strong>Archetype</strong>: References a single video frame.\n<strong>Archetype</strong>: How we interpret the coordinate system of an …\nConfigures the zoom-dependent scalar aggregation.\nA color multiplier applied to the whole asset.\nA color multiplier applied to the whole mesh.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nVisual length of the 3 axes.\nThe asset’s bytes.\nThe asset’s bytes.\nThe encoded content of some image file, e.g. a PNG or JPEG.\nThe raw depth image data.\nThe raw image data.\nThe raw image data.\nSets the view coordinates for the camera.\nOptional center positions of the boxes.\nOptional center positions of the boxes.\nOptional center positions of the ellipsoids.\nOptional class Ids for the points.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional class ID for the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the lines.\nOptional <code>components::ClassId</code>s for the lines.\nOptional class Ids for the vertices.\nOptional class Ids for the points.\nOptional class Ids for the points.\nThe color of the bar chart\nOptional color to use for the log line in the Rerun Viewer.\nColormap to use for rendering the depth image.\nOptional colors for the points.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the boxes.\nOptional colors for the capsules.\nOptional colors for the ellipsoids.\nOptional colors for the line strings.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the line strips.\nOptional colors for the line strips.\nOptional colors for the points.\nOptional colors for the points.")